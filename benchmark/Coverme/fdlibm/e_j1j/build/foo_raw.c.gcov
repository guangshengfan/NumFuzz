        -:    0:Source:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_j1j/build/foo_raw.c
        -:    0:Graph:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_j1j/build/foo_raw.gcno
        -:    0:Data:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_j1j/build/foo_raw.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* @(#)e_j1.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* __ieee754_j1(x), __ieee754_y1(x)
        -:   15: * Bessel function of the first and second kinds of order zero.
        -:   16: * Method -- j1(x):
        -:   17: *	1. For tiny x, we use j1(x) = x/2 - x^3/16 + x^5/384 - ...
        -:   18: *	2. Reduce x to |x| since j1(x)=-j1(-x),  and
        -:   19: *	   for x in (0,2)
        -:   20: *		j1(x) = x/2 + x*z*R0/S0,  where z = x*x;
        -:   21: *	   (precision:  |j1/x - 1/2 - R0/S0 |<2**-61.51 )
        -:   22: *	   for x in (2,inf)
        -:   23: * 		j1(x) = sqrt(2/(pi*x))*(p1(x)*cos(x1)-q1(x)*sin(x1))
        -:   24: * 		y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x1)+q1(x)*cos(x1))
        -:   25: * 	   where x1 = x-3*pi/4. It is better to compute sin(x1),cos(x1)
        -:   26: *	   as follow:
        -:   27: *		cos(x1) =  cos(x)cos(3pi/4)+sin(x)sin(3pi/4)
        -:   28: *			=  1/sqrt(2) * (sin(x) - cos(x))
        -:   29: *		sin(x1) =  sin(x)cos(3pi/4)-cos(x)sin(3pi/4)
        -:   30: *			= -1/sqrt(2) * (sin(x) + cos(x))
        -:   31: * 	   (To avoid cancellation, use
        -:   32: *		sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))
        -:   33: * 	    to compute the worse one.)
        -:   34: *	   
        -:   35: *	3 Special cases
        -:   36: *		j1(nan)= nan
        -:   37: *		j1(0) = 0
        -:   38: *		j1(inf) = 0
        -:   39: *		
        -:   40: * Method -- y1(x):
        -:   41: *	1. screen out x<=0 cases: y1(0)=-inf, y1(x<0)=NaN 
        -:   42: *	2. For x<2.
        -:   43: *	   Since 
        -:   44: *		y1(x) = 2/pi*(j1(x)*(ln(x/2)+Euler)-1/x-x/2+5/64*x^3-...)
        -:   45: *	   therefore y1(x)-2/pi*j1(x)*ln(x)-1/x is an odd function.
        -:   46: *	   We use the following function to approximate y1,
        -:   47: *		y1(x) = x*U(z)/V(z) + (2/pi)*(j1(x)*ln(x)-1/x), z= x^2
        -:   48: *	   where for x in [0,2] (abs err less than 2**-65.89)
        -:   49: *		U(z) = U0[0] + U0[1]*z + ... + U0[4]*z^4
        -:   50: *		V(z) = 1  + v0[0]*z + ... + v0[4]*z^5
        -:   51: *	   Note: For tiny x, 1/x dominate y1 and hence
        -:   52: *		y1(tiny) = -2/pi/tiny, (choose tiny<2**-54)
        -:   53: *	3. For x>=2.
        -:   54: * 		y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x1)+q1(x)*cos(x1))
        -:   55: * 	   where x1 = x-3*pi/4. It is better to compute sin(x1),cos(x1)
        -:   56: *	   by method mentioned above.
        -:   57: */
        -:   58:
        -:   59:#include "fdlibm.h"
        -:   60:
        -:   61:#ifdef __STDC__
        -:   62:static double pone(double), qone(double);
        -:   63:#else
        -:   64:static double pone(), qone();
        -:   65:#endif
        -:   66:
        -:   67:#ifdef __STDC__
        -:   68:static const double 
        -:   69:#else
        -:   70:static double 
        -:   71:#endif
        -:   72:huge    = 1e300,
        -:   73:one	= 1.0,
        -:   74:invsqrtpi=  5.64189583547756279280e-01, /* 0x3FE20DD7, 0x50429B6D */
        -:   75:tpi      =  6.36619772367581382433e-01, /* 0x3FE45F30, 0x6DC9C883 */
        -:   76:	/* R0/S0 on [0,2] */
        -:   77:r00  = -6.25000000000000000000e-02, /* 0xBFB00000, 0x00000000 */
        -:   78:r01  =  1.40705666955189706048e-03, /* 0x3F570D9F, 0x98472C61 */
        -:   79:r02  = -1.59955631084035597520e-05, /* 0xBEF0C5C6, 0xBA169668 */
        -:   80:r03  =  4.96727999609584448412e-08, /* 0x3E6AAAFA, 0x46CA0BD9 */
        -:   81:s01  =  1.91537599538363460805e-02, /* 0x3F939D0B, 0x12637E53 */
        -:   82:s02  =  1.85946785588630915560e-04, /* 0x3F285F56, 0xB9CDF664 */
        -:   83:s03  =  1.17718464042623683263e-06, /* 0x3EB3BFF8, 0x333F8498 */
        -:   84:s04  =  5.04636257076217042715e-09, /* 0x3E35AC88, 0xC97DFF2C */
        -:   85:s05  =  1.23542274426137913908e-11; /* 0x3DAB2ACF, 0xCFB97ED8 */
        -:   86:
        -:   87:static double zero    = 0.0;
        -:   88:
        -:   89:#ifdef __STDC__
function foo_raw called 49 returned 100% blocks executed 100%
       49:   90:	double foo_raw(double x) 
        -:   91:#else
        -:   92:	double foo_raw(x) 
        -:   93:	double x;
        -:   94:#endif
        -:   95:{
        -:   96:	double z, s,c,ss,cc,r,u,v,y;
        -:   97:	int hx,ix;
        -:   98:
       49:   99:	hx = __HI(x);
       49:  100:	ix = hx&0x7fffffff;
       49:  101:	if(ix>=0x7ff00000) return one/x;
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       48:  102:	y = fabs(x);
       48:  103:	if(ix >= 0x40000000) {	/* |x| >= 2.0 */
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        8:  104:		s = sin(y);
        8:  105:		c = cos(y);
        8:  106:		ss = -s-c;
        8:  107:		cc = s-c;
        8:  108:		if(ix<0x7fe00000) {  /* make sure y+y not overflow */
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        6:  109:		    z = cos(y+y);
        6:  110:		    if ((s*c)>zero) cc = z/ss;
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        4:  111:		    else 	    ss = z/cc;
        -:  112:		}
        -:  113:	/*
        -:  114:	 * j1(x) = 1/sqrt(pi) * (P(1,x)*cc - Q(1,x)*ss) / sqrt(x)
        -:  115:	 * y1(x) = 1/sqrt(pi) * (P(1,x)*ss + Q(1,x)*cc) / sqrt(x)
        -:  116:	 */
        8:  117:		if(ix>0x48000000) z = (invsqrtpi*cc)/sqrt(y);
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
        -:  118:		else {
        3:  119:		    u = pone(y); v = qone(y);
call    0 returned 100%
call    1 returned 100%
        3:  120:		    z = invsqrtpi*(u*cc-v*ss)/sqrt(y);
        -:  121:		}
        8:  122:		if(hx<0) return -z;
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        2:  123:		else  	 return  z;
        -:  124:	}
       40:  125:	if(ix<0x3e400000) {	/* |x|<2**-27 */
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
       21:  126:	    if(huge+x>one) return 0.5*x;/* inexact if x!=0 necessary */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  127:	}
       19:  128:	z = x*x;
       19:  129:	r =  z*(r00+z*(r01+z*(r02+z*r03)));
       19:  130:	s =  one+z*(s01+z*(s02+z*(s03+z*(s04+z*s05))));
       19:  131:	r *= x;
       19:  132:	return(x*0.5+r/s);
        -:  133:}
        -:  134:
        -:  135:#ifdef __STDC__
        -:  136:static const double U0[5] = {
        -:  137:#else
        -:  138:static double U0[5] = {
        -:  139:#endif
        -:  140: -1.96057090646238940668e-01, /* 0xBFC91866, 0x143CBC8A */
        -:  141:  5.04438716639811282616e-02, /* 0x3FA9D3C7, 0x76292CD1 */
        -:  142: -1.91256895875763547298e-03, /* 0xBF5F55E5, 0x4844F50F */
        -:  143:  2.35252600561610495928e-05, /* 0x3EF8AB03, 0x8FA6B88E */
        -:  144: -9.19099158039878874504e-08, /* 0xBE78AC00, 0x569105B8 */
        -:  145:};
        -:  146:#ifdef __STDC__
        -:  147:static const double V0[5] = {
        -:  148:#else
        -:  149:static double V0[5] = {
        -:  150:#endif
        -:  151:  1.99167318236649903973e-02, /* 0x3F94650D, 0x3F4DA9F0 */
        -:  152:  2.02552581025135171496e-04, /* 0x3F2A8C89, 0x6C257764 */
        -:  153:  1.35608801097516229404e-06, /* 0x3EB6C05A, 0x894E8CA6 */
        -:  154:  6.22741452364621501295e-09, /* 0x3E3ABF1D, 0x5BA69A86 */
        -:  155:  1.66559246207992079114e-11, /* 0x3DB25039, 0xDACA772A */
        -:  156:};
        -:  157:
        -:  158:
        -:  159:/* For x >= 8, the asymptotic expansions of pone is
        -:  160: *	1 + 15/128 s^2 - 4725/2^15 s^4 - ...,	where s = 1/x.
        -:  161: * We approximate pone by
        -:  162: * 	pone(x) = 1 + (R/S)
        -:  163: * where  R = pr0 + pr1*s^2 + pr2*s^4 + ... + pr5*s^10
        -:  164: * 	  S = 1 + ps0*s^2 + ... + ps4*s^10
        -:  165: * and
        -:  166: *	| pone(x)-1-R/S | <= 2  ** ( -60.06)
        -:  167: */
        -:  168:
        -:  169:#ifdef __STDC__
        -:  170:static const double pr8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  171:#else
        -:  172:static double pr8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  173:#endif
        -:  174:  0.00000000000000000000e+00, /* 0x00000000, 0x00000000 */
        -:  175:  1.17187499999988647970e-01, /* 0x3FBDFFFF, 0xFFFFFCCE */
        -:  176:  1.32394806593073575129e+01, /* 0x402A7A9D, 0x357F7FCE */
        -:  177:  4.12051854307378562225e+02, /* 0x4079C0D4, 0x652EA590 */
        -:  178:  3.87474538913960532227e+03, /* 0x40AE457D, 0xA3A532CC */
        -:  179:  7.91447954031891731574e+03, /* 0x40BEEA7A, 0xC32782DD */
        -:  180:};
        -:  181:#ifdef __STDC__
        -:  182:static const double ps8[5] = {
        -:  183:#else
        -:  184:static double ps8[5] = {
        -:  185:#endif
        -:  186:  1.14207370375678408436e+02, /* 0x405C8D45, 0x8E656CAC */
        -:  187:  3.65093083420853463394e+03, /* 0x40AC85DC, 0x964D274F */
        -:  188:  3.69562060269033463555e+04, /* 0x40E20B86, 0x97C5BB7F */
        -:  189:  9.76027935934950801311e+04, /* 0x40F7D42C, 0xB28F17BB */
        -:  190:  3.08042720627888811578e+04, /* 0x40DE1511, 0x697A0B2D */
        -:  191:};
        -:  192:
        -:  193:#ifdef __STDC__
        -:  194:static const double pr5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  195:#else
        -:  196:static double pr5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  197:#endif
        -:  198:  1.31990519556243522749e-11, /* 0x3DAD0667, 0xDAE1CA7D */
        -:  199:  1.17187493190614097638e-01, /* 0x3FBDFFFF, 0xE2C10043 */
        -:  200:  6.80275127868432871736e+00, /* 0x401B3604, 0x6E6315E3 */
        -:  201:  1.08308182990189109773e+02, /* 0x405B13B9, 0x452602ED */
        -:  202:  5.17636139533199752805e+02, /* 0x40802D16, 0xD052D649 */
        -:  203:  5.28715201363337541807e+02, /* 0x408085B8, 0xBB7E0CB7 */
        -:  204:};
        -:  205:#ifdef __STDC__
        -:  206:static const double ps5[5] = {
        -:  207:#else
        -:  208:static double ps5[5] = {
        -:  209:#endif
        -:  210:  5.92805987221131331921e+01, /* 0x404DA3EA, 0xA8AF633D */
        -:  211:  9.91401418733614377743e+02, /* 0x408EFB36, 0x1B066701 */
        -:  212:  5.35326695291487976647e+03, /* 0x40B4E944, 0x5706B6FB */
        -:  213:  7.84469031749551231769e+03, /* 0x40BEA4B0, 0xB8A5BB15 */
        -:  214:  1.50404688810361062679e+03, /* 0x40978030, 0x036F5E51 */
        -:  215:};
        -:  216:
        -:  217:#ifdef __STDC__
        -:  218:static const double pr3[6] = {
        -:  219:#else
        -:  220:static double pr3[6] = {/* for x in [4.547,2.8571]=1/[0.2199,0.35001] */
        -:  221:#endif
        -:  222:  3.02503916137373618024e-09, /* 0x3E29FC21, 0xA7AD9EDD */
        -:  223:  1.17186865567253592491e-01, /* 0x3FBDFFF5, 0x5B21D17B */
        -:  224:  3.93297750033315640650e+00, /* 0x400F76BC, 0xE85EAD8A */
        -:  225:  3.51194035591636932736e+01, /* 0x40418F48, 0x9DA6D129 */
        -:  226:  9.10550110750781271918e+01, /* 0x4056C385, 0x4D2C1837 */
        -:  227:  4.85590685197364919645e+01, /* 0x4048478F, 0x8EA83EE5 */
        -:  228:};
        -:  229:#ifdef __STDC__
        -:  230:static const double ps3[5] = {
        -:  231:#else
        -:  232:static double ps3[5] = {
        -:  233:#endif
        -:  234:  3.47913095001251519989e+01, /* 0x40416549, 0xA134069C */
        -:  235:  3.36762458747825746741e+02, /* 0x40750C33, 0x07F1A75F */
        -:  236:  1.04687139975775130551e+03, /* 0x40905B7C, 0x5037D523 */
        -:  237:  8.90811346398256432622e+02, /* 0x408BD67D, 0xA32E31E9 */
        -:  238:  1.03787932439639277504e+02, /* 0x4059F26D, 0x7C2EED53 */
        -:  239:};
        -:  240:
        -:  241:#ifdef __STDC__
        -:  242:static const double pr2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  243:#else
        -:  244:static double pr2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  245:#endif
        -:  246:  1.07710830106873743082e-07, /* 0x3E7CE9D4, 0xF65544F4 */
        -:  247:  1.17176219462683348094e-01, /* 0x3FBDFF42, 0xBE760D83 */
        -:  248:  2.36851496667608785174e+00, /* 0x4002F2B7, 0xF98FAEC0 */
        -:  249:  1.22426109148261232917e+01, /* 0x40287C37, 0x7F71A964 */
        -:  250:  1.76939711271687727390e+01, /* 0x4031B1A8, 0x177F8EE2 */
        -:  251:  5.07352312588818499250e+00, /* 0x40144B49, 0xA574C1FE */
        -:  252:};
        -:  253:#ifdef __STDC__
        -:  254:static const double ps2[5] = {
        -:  255:#else
        -:  256:static double ps2[5] = {
        -:  257:#endif
        -:  258:  2.14364859363821409488e+01, /* 0x40356FBD, 0x8AD5ECDC */
        -:  259:  1.25290227168402751090e+02, /* 0x405F5293, 0x14F92CD5 */
        -:  260:  2.32276469057162813669e+02, /* 0x406D08D8, 0xD5A2DBD9 */
        -:  261:  1.17679373287147100768e+02, /* 0x405D6B7A, 0xDA1884A9 */
        -:  262:  8.36463893371618283368e+00, /* 0x4020BAB1, 0xF44E5192 */
        -:  263:};
        -:  264:
        -:  265://LCOV_EXCL_START
        -:  266:#ifdef __STDC__
function pone called 3 returned 100% blocks executed 80%
        3:  267:	static double pone(double x)
        -:  268:#else
        -:  269:	static double pone(x)
        -:  270:	double x;
        -:  271:#endif
        -:  272:{
        -:  273:#ifdef __STDC__
        -:  274:	const double *p,*q;
        -:  275:#else
        -:  276:	double *p,*q;
        -:  277:#endif
        -:  278:	double z,r,s;
        -:  279:        int ix;
        3:  280:        ix = 0x7fffffff&__HI(x);
        3:  281:        if(ix>=0x40200000)     {p = pr8; q= ps8;}
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       1*:  282:        else if(ix>=0x40122E8B){p = pr5; q= ps5;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       1*:  283:        else if(ix>=0x4006DB6D){p = pr3; q= ps3;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  284:        else if(ix>=0x40000000){p = pr2; q= ps2;}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  285:        z = one/(x*x);
        3:  286:        r = p[0]+z*(p[1]+z*(p[2]+z*(p[3]+z*(p[4]+z*p[5]))));
        3:  287:        s = one+z*(q[0]+z*(q[1]+z*(q[2]+z*(q[3]+z*q[4]))));
        3:  288:        return one+ r/s;
        -:  289:}
        -:  290:		
        -:  291:
        -:  292:/* For x >= 8, the asymptotic expansions of qone is
        -:  293: *	3/8 s - 105/1024 s^3 - ..., where s = 1/x.
        -:  294: * We approximate pone by
        -:  295: * 	qone(x) = s*(0.375 + (R/S))
        -:  296: * where  R = qr1*s^2 + qr2*s^4 + ... + qr5*s^10
        -:  297: * 	  S = 1 + qs1*s^2 + ... + qs6*s^12
        -:  298: * and
        -:  299: *	| qone(x)/s -0.375-R/S | <= 2  ** ( -61.13)
        -:  300: */
        -:  301:
        -:  302:#ifdef __STDC__
        -:  303:static const double qr8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  304:#else
        -:  305:static double qr8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  306:#endif
        -:  307:  0.00000000000000000000e+00, /* 0x00000000, 0x00000000 */
        -:  308: -1.02539062499992714161e-01, /* 0xBFBA3FFF, 0xFFFFFDF3 */
        -:  309: -1.62717534544589987888e+01, /* 0xC0304591, 0xA26779F7 */
        -:  310: -7.59601722513950107896e+02, /* 0xC087BCD0, 0x53E4B576 */
        -:  311: -1.18498066702429587167e+04, /* 0xC0C724E7, 0x40F87415 */
        -:  312: -4.84385124285750353010e+04, /* 0xC0E7A6D0, 0x65D09C6A */
        -:  313:};
        -:  314:#ifdef __STDC__
        -:  315:static const double qs8[6] = {
        -:  316:#else
        -:  317:static double qs8[6] = {
        -:  318:#endif
        -:  319:  1.61395369700722909556e+02, /* 0x40642CA6, 0xDE5BCDE5 */
        -:  320:  7.82538599923348465381e+03, /* 0x40BE9162, 0xD0D88419 */
        -:  321:  1.33875336287249578163e+05, /* 0x4100579A, 0xB0B75E98 */
        -:  322:  7.19657723683240939863e+05, /* 0x4125F653, 0x72869C19 */
        -:  323:  6.66601232617776375264e+05, /* 0x412457D2, 0x7719AD5C */
        -:  324: -2.94490264303834643215e+05, /* 0xC111F969, 0x0EA5AA18 */
        -:  325:};
        -:  326:
        -:  327:#ifdef __STDC__
        -:  328:static const double qr5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  329:#else
        -:  330:static double qr5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  331:#endif
        -:  332: -2.08979931141764104297e-11, /* 0xBDB6FA43, 0x1AA1A098 */
        -:  333: -1.02539050241375426231e-01, /* 0xBFBA3FFF, 0xCB597FEF */
        -:  334: -8.05644828123936029840e+00, /* 0xC0201CE6, 0xCA03AD4B */
        -:  335: -1.83669607474888380239e+02, /* 0xC066F56D, 0x6CA7B9B0 */
        -:  336: -1.37319376065508163265e+03, /* 0xC09574C6, 0x6931734F */
        -:  337: -2.61244440453215656817e+03, /* 0xC0A468E3, 0x88FDA79D */
        -:  338:};
        -:  339:#ifdef __STDC__
        -:  340:static const double qs5[6] = {
        -:  341:#else
        -:  342:static double qs5[6] = {
        -:  343:#endif
        -:  344:  8.12765501384335777857e+01, /* 0x405451B2, 0xFF5A11B2 */
        -:  345:  1.99179873460485964642e+03, /* 0x409F1F31, 0xE77BF839 */
        -:  346:  1.74684851924908907677e+04, /* 0x40D10F1F, 0x0D64CE29 */
        -:  347:  4.98514270910352279316e+04, /* 0x40E8576D, 0xAABAD197 */
        -:  348:  2.79480751638918118260e+04, /* 0x40DB4B04, 0xCF7C364B */
        -:  349: -4.71918354795128470869e+03, /* 0xC0B26F2E, 0xFCFFA004 */
        -:  350:};
        -:  351:
        -:  352:#ifdef __STDC__
        -:  353:static const double qr3[6] = {
        -:  354:#else
        -:  355:static double qr3[6] = {/* for x in [4.547,2.8571]=1/[0.2199,0.35001] */
        -:  356:#endif
        -:  357: -5.07831226461766561369e-09, /* 0xBE35CFA9, 0xD38FC84F */
        -:  358: -1.02537829820837089745e-01, /* 0xBFBA3FEB, 0x51AEED54 */
        -:  359: -4.61011581139473403113e+00, /* 0xC01270C2, 0x3302D9FF */
        -:  360: -5.78472216562783643212e+01, /* 0xC04CEC71, 0xC25D16DA */
        -:  361: -2.28244540737631695038e+02, /* 0xC06C87D3, 0x4718D55F */
        -:  362: -2.19210128478909325622e+02, /* 0xC06B66B9, 0x5F5C1BF6 */
        -:  363:};
        -:  364:#ifdef __STDC__
        -:  365:static const double qs3[6] = {
        -:  366:#else
        -:  367:static double qs3[6] = {
        -:  368:#endif
        -:  369:  4.76651550323729509273e+01, /* 0x4047D523, 0xCCD367E4 */
        -:  370:  6.73865112676699709482e+02, /* 0x40850EEB, 0xC031EE3E */
        -:  371:  3.38015286679526343505e+03, /* 0x40AA684E, 0x448E7C9A */
        -:  372:  5.54772909720722782367e+03, /* 0x40B5ABBA, 0xA61D54A6 */
        -:  373:  1.90311919338810798763e+03, /* 0x409DBC7A, 0x0DD4DF4B */
        -:  374: -1.35201191444307340817e+02, /* 0xC060E670, 0x290A311F */
        -:  375:};
        -:  376:
        -:  377:#ifdef __STDC__
        -:  378:static const double qr2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  379:#else
        -:  380:static double qr2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  381:#endif
        -:  382: -1.78381727510958865572e-07, /* 0xBE87F126, 0x44C626D2 */
        -:  383: -1.02517042607985553460e-01, /* 0xBFBA3E8E, 0x9148B010 */
        -:  384: -2.75220568278187460720e+00, /* 0xC0060484, 0x69BB4EDA */
        -:  385: -1.96636162643703720221e+01, /* 0xC033A9E2, 0xC168907F */
        -:  386: -4.23253133372830490089e+01, /* 0xC04529A3, 0xDE104AAA */
        -:  387: -2.13719211703704061733e+01, /* 0xC0355F36, 0x39CF6E52 */
        -:  388:};
        -:  389:#ifdef __STDC__
        -:  390:static const double qs2[6] = {
        -:  391:#else
        -:  392:static double qs2[6] = {
        -:  393:#endif
        -:  394:  2.95333629060523854548e+01, /* 0x403D888A, 0x78AE64FF */
        -:  395:  2.52981549982190529136e+02, /* 0x406F9F68, 0xDB821CBA */
        -:  396:  7.57502834868645436472e+02, /* 0x4087AC05, 0xCE49A0F7 */
        -:  397:  7.39393205320467245656e+02, /* 0x40871B25, 0x48D4C029 */
        -:  398:  1.55949003336666123687e+02, /* 0x40637E5E, 0x3C3ED8D4 */
        -:  399: -4.95949898822628210127e+00, /* 0xC013D686, 0xE71BE86B */
        -:  400:};
        -:  401:
        -:  402:#ifdef __STDC__
function qone called 3 returned 100% blocks executed 80%
        3:  403:	static double qone(double x)
        -:  404:#else
        -:  405:	static double qone(x)
        -:  406:	double x;
        -:  407:#endif
        -:  408:{
        -:  409:#ifdef __STDC__
        -:  410:	const double *p,*q;
        -:  411:#else
        -:  412:	double *p,*q;
        -:  413:#endif
        -:  414:	double  s,r,z;
        -:  415:	int ix;
        3:  416:	ix = 0x7fffffff&__HI(x);
        3:  417:	if(ix>=0x40200000)     {p = qr8; q= qs8;}
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
       1*:  418:	else if(ix>=0x40122E8B){p = qr5; q= qs5;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       1*:  419:	else if(ix>=0x4006DB6D){p = qr3; q= qs3;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  420:	else if(ix>=0x40000000){p = qr2; q= qs2;}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  421:	z = one/(x*x);
        3:  422:	r = p[0]+z*(p[1]+z*(p[2]+z*(p[3]+z*(p[4]+z*p[5]))));
        3:  423:	s = one+z*(q[0]+z*(q[1]+z*(q[2]+z*(q[3]+z*(q[4]+z*q[5])))));
        3:  424:	return (.375 + r/s)/x;
        -:  425:}
        -:  426://LCOV_EXCL_STOP
