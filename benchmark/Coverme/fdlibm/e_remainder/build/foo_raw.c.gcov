        -:    0:Source:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_remainder/build/foo_raw.c
        -:    0:Graph:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_remainder/build/foo_raw.gcno
        -:    0:Data:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_remainder/build/foo_raw.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* @(#)e_remainder.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* __ieee754_remainder(x,p)
        -:   15: * Return :                  
        -:   16: * 	returns  x REM p  =  x - [x/p]*p as if in infinite 
        -:   17: * 	precise arithmetic, where [x/p] is the (infinite bit) 
        -:   18: *	integer nearest x/p (in half way case choose the even one).
        -:   19: * Method : 
        -:   20: *	Based on fmod() return x-[x/p]chopped*p exactlp.
        -:   21: */
        -:   22:
        -:   23:#include "fdlibm.h"
        -:   24:
        -:   25:#ifdef __STDC__
        -:   26:static const double zero = 0.0;
        -:   27:#else
        -:   28:static double zero = 0.0;
        -:   29:#endif
        -:   30:
        -:   31:
        -:   32:#ifdef __STDC__
function foo_raw called 17 returned 100% blocks executed 90%
       17:   33:	double foo_raw(double x, double p)
        -:   34:#else
        -:   35:	double foo_raw(x,p)
        -:   36:	double x,p;
        -:   37:#endif
        -:   38:{
        -:   39:	int hx,hp;
        -:   40:	unsigned sx,lx,lp;
        -:   41:	double p_half;
        -:   42:
       17:   43:	hx = __HI(x);		/* high word of x */
       17:   44:	lx = __LO(x);		/* low  word of x */
       17:   45:	hp = __HI(p);		/* high word of p */
       17:   46:	lp = __LO(p);		/* low  word of p */
       17:   47:	sx = hx&0x80000000;
       17:   48:	hp &= 0x7fffffff;
       17:   49:	hx &= 0x7fffffff;
        -:   50:
        -:   51:    /* purge off exception values */
       17:   52:	if((hp|lp)==0) return (x*p)/(x*p); 	/* p = 0 */
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
       16:   53:	if((hx>=0x7ff00000)||			/* x not finite */
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 29% (fallthrough)
branch  3 taken 71%
        4:   54:	  ((hp>=0x7ff00000)&&			/* p is NaN */
        4:   55:	  (((hp-0x7ff00000)|lp)!=0)))
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        3:   56:	    return (x*p)/(x*p);
        -:   57:
        -:   58:
       13:   59:	if (hp<=0x7fdfffff) x = __ieee754_fmod(x,p+p);	/* now x < 2p */
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
call    2 returned 100%
       13:   60:	if (((hx-hp)|(lx-lp))==0) return zero*x;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
       12:   61:	x  = fabs(x);
       12:   62:	p  = fabs(p);
       12:   63:	if (hp<0x00200000) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        2:   64:	    if(x+x>p) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   65:		x-=p;
    #####:   66:		if(x+x>=p) x -= p;
branch  0 never executed
branch  1 never executed
        -:   67:	    }
        -:   68:	} else {
       10:   69:	    p_half = 0.5*p;
       10:   70:	    if(x>p_half) {
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        4:   71:		x-=p;
        4:   72:		if(x>=p_half) x -= p;
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   73:	    }
        -:   74:	}
       12:   75:	__HI(x) ^= sx;
       12:   76:	return x;
        -:   77:}
