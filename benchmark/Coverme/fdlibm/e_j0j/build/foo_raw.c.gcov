        -:    0:Source:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_j0j/build/foo_raw.c
        -:    0:Graph:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_j0j/build/foo_raw.gcno
        -:    0:Data:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_j0j/build/foo_raw.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* @(#)e_j0.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* __ieee754_j0(x), __ieee754_y0(x)
        -:   15: * Bessel function of the first and second kinds of order zero.
        -:   16: * Method -- j0(x):
        -:   17: *	1. For tiny x, we use j0(x) = 1 - x^2/4 + x^4/64 - ...
        -:   18: *	2. Reduce x to |x| since j0(x)=j0(-x),  and
        -:   19: *	   for x in (0,2)
        -:   20: *		j0(x) = 1-z/4+ z^2*R0/S0,  where z = x*x;
        -:   21: *	   (precision:  |j0-1+z/4-z^2R0/S0 |<2**-63.67 )
        -:   22: *	   for x in (2,inf)
        -:   23: * 		j0(x) = sqrt(2/(pi*x))*(p0(x)*cos(x0)-q0(x)*sin(x0))
        -:   24: * 	   where x0 = x-pi/4. It is better to compute sin(x0),cos(x0)
        -:   25: *	   as follow:
        -:   26: *		cos(x0) = cos(x)cos(pi/4)+sin(x)sin(pi/4)
        -:   27: *			= 1/sqrt(2) * (cos(x) + sin(x))
        -:   28: *		sin(x0) = sin(x)cos(pi/4)-cos(x)sin(pi/4)
        -:   29: *			= 1/sqrt(2) * (sin(x) - cos(x))
        -:   30: * 	   (To avoid cancellation, use
        -:   31: *		sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))
        -:   32: * 	    to compute the worse one.)
        -:   33: *	   
        -:   34: *	3 Special cases
        -:   35: *		j0(nan)= nan
        -:   36: *		j0(0) = 1
        -:   37: *		j0(inf) = 0
        -:   38: *		
        -:   39: * Method -- y0(x):
        -:   40: *	1. For x<2.
        -:   41: *	   Since 
        -:   42: *		y0(x) = 2/pi*(j0(x)*(ln(x/2)+Euler) + x^2/4 - ...)
        -:   43: *	   therefore y0(x)-2/pi*j0(x)*ln(x) is an even function.
        -:   44: *	   We use the following function to approximate y0,
        -:   45: *		y0(x) = U(z)/V(z) + (2/pi)*(j0(x)*ln(x)), z= x^2
        -:   46: *	   where 
        -:   47: *		U(z) = u00 + u01*z + ... + u06*z^6
        -:   48: *		V(z) = 1  + v01*z + ... + v04*z^4
        -:   49: *	   with absolute approximation error bounded by 2**-72.
        -:   50: *	   Note: For tiny x, U/V = u0 and j0(x)~1, hence
        -:   51: *		y0(tiny) = u0 + (2/pi)*ln(tiny), (choose tiny<2**-27)
        -:   52: *	2. For x>=2.
        -:   53: * 		y0(x) = sqrt(2/(pi*x))*(p0(x)*cos(x0)+q0(x)*sin(x0))
        -:   54: * 	   where x0 = x-pi/4. It is better to compute sin(x0),cos(x0)
        -:   55: *	   by the method mentioned above.
        -:   56: *	3. Special cases: y0(0)=-inf, y0(x<0)=NaN, y0(inf)=0.
        -:   57: */
        -:   58:
        -:   59:#include "fdlibm.h"
        -:   60:
        -:   61:#ifdef __STDC__
        -:   62:static double pzero(double), qzero(double);
        -:   63:#else
        -:   64:static double pzero(), qzero();
        -:   65:#endif
        -:   66:
        -:   67:#ifdef __STDC__
        -:   68:static const double 
        -:   69:#else
        -:   70:static double 
        -:   71:#endif
        -:   72:huge 	= 1e300,
        -:   73:one	= 1.0,
        -:   74:invsqrtpi=  5.64189583547756279280e-01, /* 0x3FE20DD7, 0x50429B6D */
        -:   75:tpi      =  6.36619772367581382433e-01, /* 0x3FE45F30, 0x6DC9C883 */
        -:   76: 		/* R0/S0 on [0, 2.00] */
        -:   77:R02  =  1.56249999999999947958e-02, /* 0x3F8FFFFF, 0xFFFFFFFD */
        -:   78:R03  = -1.89979294238854721751e-04, /* 0xBF28E6A5, 0xB61AC6E9 */
        -:   79:R04  =  1.82954049532700665670e-06, /* 0x3EBEB1D1, 0x0C503919 */
        -:   80:R05  = -4.61832688532103189199e-09, /* 0xBE33D5E7, 0x73D63FCE */
        -:   81:S01  =  1.56191029464890010492e-02, /* 0x3F8FFCE8, 0x82C8C2A4 */
        -:   82:S02  =  1.16926784663337450260e-04, /* 0x3F1EA6D2, 0xDD57DBF4 */
        -:   83:S03  =  5.13546550207318111446e-07, /* 0x3EA13B54, 0xCE84D5A9 */
        -:   84:S04  =  1.16614003333790000205e-09; /* 0x3E1408BC, 0xF4745D8F */
        -:   85:
        -:   86:static double zero = 0.0;
        -:   87:
        -:   88:#ifdef __STDC__
function foo_raw called 52 returned 100% blocks executed 100%
       52:   89:	double foo_raw(double x) 
        -:   90:#else
        -:   91:	double foo_raw(x) 
        -:   92:	double x;
        -:   93:#endif
        -:   94:{
        -:   95:	double z, s,c,ss,cc,r,u,v;
        -:   96:	int hx,ix;
        -:   97:
       52:   98:	hx = __HI(x);
       52:   99:	ix = hx&0x7fffffff;
       52:  100:	if(ix>=0x7ff00000) return one/(x*x);
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       50:  101:	x = fabs(x);
       50:  102:	if(ix >= 0x40000000) {	/* |x| >= 2.0 */
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        5:  103:		s = sin(x);
        5:  104:		c = cos(x);
        5:  105:		ss = s-c;
        5:  106:		cc = s+c;
        5:  107:		if(ix<0x7fe00000) {  /* make sure x+x not overflow */
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:  108:		    z = -cos(x+x);
        4:  109:		    if ((s*c)<zero) cc = z/ss;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  110:		    else 	    ss = z/cc;
        -:  111:		}
        -:  112:	/*
        -:  113:	 * j0(x) = 1/sqrt(pi) * (P(0,x)*cc - Q(0,x)*ss) / sqrt(x)
        -:  114:	 * y0(x) = 1/sqrt(pi) * (P(0,x)*ss + Q(0,x)*cc) / sqrt(x)
        -:  115:	 */
        5:  116:		if(ix>0x48000000) z = (invsqrtpi*cc)/sqrt(x);
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  117:		else {
        1:  118:		    u = pzero(x); v = qzero(x);
call    0 returned 100%
call    1 returned 100%
        1:  119:		    z = invsqrtpi*(u*cc-v*ss)/sqrt(x);
        -:  120:		}
        5:  121:		return z;
        -:  122:	}
       45:  123:	if(ix<0x3f200000) {	/* |x| < 2**-13 */
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
       25:  124:	    if(huge+x>one) {	/* raise inexact if x != 0 */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       25:  125:	        if(ix<0x3e400000) return one;	/* |x|<2**-27 */
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
       11:  126:	        else 	      return one - 0.25*x*x;
        -:  127:	    }
        -:  128:	}
       20:  129:	z = x*x;
       20:  130:	r =  z*(R02+z*(R03+z*(R04+z*R05)));
       20:  131:	s =  one+z*(S01+z*(S02+z*(S03+z*S04)));
       20:  132:	if(ix < 0x3FF00000) {	/* |x| < 1.00 */
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        9:  133:	    return one + z*(-0.25+(r/s));
        -:  134:	} else {
       11:  135:	    u = 0.5*x;
       11:  136:	    return((one+u)*(one-u)+z*(r/s));
        -:  137:	}
        -:  138:}
        -:  139:
        -:  140:#ifdef __STDC__
        -:  141:static const double
        -:  142:#else
        -:  143:static double
        -:  144:#endif
        -:  145:u00  = -7.38042951086872317523e-02, /* 0xBFB2E4D6, 0x99CBD01F */
        -:  146:u01  =  1.76666452509181115538e-01, /* 0x3FC69D01, 0x9DE9E3FC */
        -:  147:u02  = -1.38185671945596898896e-02, /* 0xBF8C4CE8, 0xB16CFA97 */
        -:  148:u03  =  3.47453432093683650238e-04, /* 0x3F36C54D, 0x20B29B6B */
        -:  149:u04  = -3.81407053724364161125e-06, /* 0xBECFFEA7, 0x73D25CAD */
        -:  150:u05  =  1.95590137035022920206e-08, /* 0x3E550057, 0x3B4EABD4 */
        -:  151:u06  = -3.98205194132103398453e-11, /* 0xBDC5E43D, 0x693FB3C8 */
        -:  152:v01  =  1.27304834834123699328e-02, /* 0x3F8A1270, 0x91C9C71A */
        -:  153:v02  =  7.60068627350353253702e-05, /* 0x3F13ECBB, 0xF578C6C1 */
        -:  154:v03  =  2.59150851840457805467e-07, /* 0x3E91642D, 0x7FF202FD */
        -:  155:v04  =  4.41110311332675467403e-10; /* 0x3DFE5018, 0x3BD6D9EF */
        -:  156:
        -:  157:/* The asymptotic expansions of pzero is
        -:  158: *	1 - 9/128 s^2 + 11025/98304 s^4 - ...,	where s = 1/x.
        -:  159: * For x >= 2, We approximate pzero by
        -:  160: * 	pzero(x) = 1 + (R/S)
        -:  161: * where  R = pR0 + pR1*s^2 + pR2*s^4 + ... + pR5*s^10
        -:  162: * 	  S = 1 + pS0*s^2 + ... + pS4*s^10
        -:  163: * and
        -:  164: *	| pzero(x)-1-R/S | <= 2  ** ( -60.26)
        -:  165: */
        -:  166:#ifdef __STDC__
        -:  167:static const double pR8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  168:#else
        -:  169:static double pR8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  170:#endif
        -:  171:  0.00000000000000000000e+00, /* 0x00000000, 0x00000000 */
        -:  172: -7.03124999999900357484e-02, /* 0xBFB1FFFF, 0xFFFFFD32 */
        -:  173: -8.08167041275349795626e+00, /* 0xC02029D0, 0xB44FA779 */
        -:  174: -2.57063105679704847262e+02, /* 0xC0701102, 0x7B19E863 */
        -:  175: -2.48521641009428822144e+03, /* 0xC0A36A6E, 0xCD4DCAFC */
        -:  176: -5.25304380490729545272e+03, /* 0xC0B4850B, 0x36CC643D */
        -:  177:};
        -:  178:#ifdef __STDC__
        -:  179:static const double pS8[5] = {
        -:  180:#else
        -:  181:static double pS8[5] = {
        -:  182:#endif
        -:  183:  1.16534364619668181717e+02, /* 0x405D2233, 0x07A96751 */
        -:  184:  3.83374475364121826715e+03, /* 0x40ADF37D, 0x50596938 */
        -:  185:  4.05978572648472545552e+04, /* 0x40E3D2BB, 0x6EB6B05F */
        -:  186:  1.16752972564375915681e+05, /* 0x40FC810F, 0x8F9FA9BD */
        -:  187:  4.76277284146730962675e+04, /* 0x40E74177, 0x4F2C49DC */
        -:  188:};
        -:  189:
        -:  190:#ifdef __STDC__
        -:  191:static const double pR5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  192:#else
        -:  193:static double pR5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  194:#endif
        -:  195: -1.14125464691894502584e-11, /* 0xBDA918B1, 0x47E495CC */
        -:  196: -7.03124940873599280078e-02, /* 0xBFB1FFFF, 0xE69AFBC6 */
        -:  197: -4.15961064470587782438e+00, /* 0xC010A370, 0xF90C6BBF */
        -:  198: -6.76747652265167261021e+01, /* 0xC050EB2F, 0x5A7D1783 */
        -:  199: -3.31231299649172967747e+02, /* 0xC074B3B3, 0x6742CC63 */
        -:  200: -3.46433388365604912451e+02, /* 0xC075A6EF, 0x28A38BD7 */
        -:  201:};
        -:  202:#ifdef __STDC__
        -:  203:static const double pS5[5] = {
        -:  204:#else
        -:  205:static double pS5[5] = {
        -:  206:#endif
        -:  207:  6.07539382692300335975e+01, /* 0x404E6081, 0x0C98C5DE */
        -:  208:  1.05125230595704579173e+03, /* 0x40906D02, 0x5C7E2864 */
        -:  209:  5.97897094333855784498e+03, /* 0x40B75AF8, 0x8FBE1D60 */
        -:  210:  9.62544514357774460223e+03, /* 0x40C2CCB8, 0xFA76FA38 */
        -:  211:  2.40605815922939109441e+03, /* 0x40A2CC1D, 0xC70BE864 */
        -:  212:};
        -:  213:
        -:  214:#ifdef __STDC__
        -:  215:static const double pR3[6] = {/* for x in [4.547,2.8571]=1/[0.2199,0.35001] */
        -:  216:#else
        -:  217:static double pR3[6] = {/* for x in [4.547,2.8571]=1/[0.2199,0.35001] */
        -:  218:#endif
        -:  219: -2.54704601771951915620e-09, /* 0xBE25E103, 0x6FE1AA86 */
        -:  220: -7.03119616381481654654e-02, /* 0xBFB1FFF6, 0xF7C0E24B */
        -:  221: -2.40903221549529611423e+00, /* 0xC00345B2, 0xAEA48074 */
        -:  222: -2.19659774734883086467e+01, /* 0xC035F74A, 0x4CB94E14 */
        -:  223: -5.80791704701737572236e+01, /* 0xC04D0A22, 0x420A1A45 */
        -:  224: -3.14479470594888503854e+01, /* 0xC03F72AC, 0xA892D80F */
        -:  225:};
        -:  226:#ifdef __STDC__
        -:  227:static const double pS3[5] = {
        -:  228:#else
        -:  229:static double pS3[5] = {
        -:  230:#endif
        -:  231:  3.58560338055209726349e+01, /* 0x4041ED92, 0x84077DD3 */
        -:  232:  3.61513983050303863820e+02, /* 0x40769839, 0x464A7C0E */
        -:  233:  1.19360783792111533330e+03, /* 0x4092A66E, 0x6D1061D6 */
        -:  234:  1.12799679856907414432e+03, /* 0x40919FFC, 0xB8C39B7E */
        -:  235:  1.73580930813335754692e+02, /* 0x4065B296, 0xFC379081 */
        -:  236:};
        -:  237:
        -:  238:#ifdef __STDC__
        -:  239:static const double pR2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  240:#else
        -:  241:static double pR2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  242:#endif
        -:  243: -8.87534333032526411254e-08, /* 0xBE77D316, 0xE927026D */
        -:  244: -7.03030995483624743247e-02, /* 0xBFB1FF62, 0x495E1E42 */
        -:  245: -1.45073846780952986357e+00, /* 0xBFF73639, 0x8A24A843 */
        -:  246: -7.63569613823527770791e+00, /* 0xC01E8AF3, 0xEDAFA7F3 */
        -:  247: -1.11931668860356747786e+01, /* 0xC02662E6, 0xC5246303 */
        -:  248: -3.23364579351335335033e+00, /* 0xC009DE81, 0xAF8FE70F */
        -:  249:};
        -:  250:#ifdef __STDC__
        -:  251:static const double pS2[5] = {
        -:  252:#else
        -:  253:static double pS2[5] = {
        -:  254:#endif
        -:  255:  2.22202997532088808441e+01, /* 0x40363865, 0x908B5959 */
        -:  256:  1.36206794218215208048e+02, /* 0x4061069E, 0x0EE8878F */
        -:  257:  2.70470278658083486789e+02, /* 0x4070E786, 0x42EA079B */
        -:  258:  1.53875394208320329881e+02, /* 0x40633C03, 0x3AB6FAFF */
        -:  259:  1.46576176948256193810e+01, /* 0x402D50B3, 0x44391809 */
        -:  260:};
        -:  261:
        -:  262:
        -:  263://LCOV_EXCL_START
        -:  264:#ifdef __STDC__
function pzero called 1 returned 100% blocks executed 70%
        1:  265:	static double pzero(double x)
        -:  266:#else
        -:  267:	static double pzero(x)
        -:  268:	double x;
        -:  269:#endif
        -:  270:{
        -:  271:#ifdef __STDC__
        -:  272:	const double *p,*q;
        -:  273:#else
        -:  274:	double *p,*q;
        -:  275:#endif
        -:  276:	double z,r,s;
        -:  277:	int ix;
        1:  278:	ix = 0x7fffffff&__HI(x);
       1*:  279:	if(ix>=0x40200000)     {p = pR8; q= pS8;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       1*:  280:	else if(ix>=0x40122E8B){p = pR5; q= pS5;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       1*:  281:	else if(ix>=0x4006DB6D){p = pR3; q= pS3;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  282:	else if(ix>=0x40000000){p = pR2; q= pS2;}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  283:	z = one/(x*x);
        1:  284:	r = p[0]+z*(p[1]+z*(p[2]+z*(p[3]+z*(p[4]+z*p[5]))));
        1:  285:	s = one+z*(q[0]+z*(q[1]+z*(q[2]+z*(q[3]+z*q[4]))));
        1:  286:	return one+ r/s;
        -:  287:}
        -:  288:		
        -:  289:
        -:  290:/* For x >= 8, the asymptotic expansions of qzero is
        -:  291: *	-1/8 s + 75/1024 s^3 - ..., where s = 1/x.
        -:  292: * We approximate pzero by
        -:  293: * 	qzero(x) = s*(-1.25 + (R/S))
        -:  294: * where  R = qR0 + qR1*s^2 + qR2*s^4 + ... + qR5*s^10
        -:  295: * 	  S = 1 + qS0*s^2 + ... + qS5*s^12
        -:  296: * and
        -:  297: *	| qzero(x)/s +1.25-R/S | <= 2  ** ( -61.22)
        -:  298: */
        -:  299:#ifdef __STDC__
        -:  300:static const double qR8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  301:#else
        -:  302:static double qR8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  303:#endif
        -:  304:  0.00000000000000000000e+00, /* 0x00000000, 0x00000000 */
        -:  305:  7.32421874999935051953e-02, /* 0x3FB2BFFF, 0xFFFFFE2C */
        -:  306:  1.17682064682252693899e+01, /* 0x40278952, 0x5BB334D6 */
        -:  307:  5.57673380256401856059e+02, /* 0x40816D63, 0x15301825 */
        -:  308:  8.85919720756468632317e+03, /* 0x40C14D99, 0x3E18F46D */
        -:  309:  3.70146267776887834771e+04, /* 0x40E212D4, 0x0E901566 */
        -:  310:};
        -:  311:#ifdef __STDC__
        -:  312:static const double qS8[6] = {
        -:  313:#else
        -:  314:static double qS8[6] = {
        -:  315:#endif
        -:  316:  1.63776026895689824414e+02, /* 0x406478D5, 0x365B39BC */
        -:  317:  8.09834494656449805916e+03, /* 0x40BFA258, 0x4E6B0563 */
        -:  318:  1.42538291419120476348e+05, /* 0x41016652, 0x54D38C3F */
        -:  319:  8.03309257119514397345e+05, /* 0x412883DA, 0x83A52B43 */
        -:  320:  8.40501579819060512818e+05, /* 0x4129A66B, 0x28DE0B3D */
        -:  321: -3.43899293537866615225e+05, /* 0xC114FD6D, 0x2C9530C5 */
        -:  322:};
        -:  323:
        -:  324:#ifdef __STDC__
        -:  325:static const double qR5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  326:#else
        -:  327:static double qR5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  328:#endif
        -:  329:  1.84085963594515531381e-11, /* 0x3DB43D8F, 0x29CC8CD9 */
        -:  330:  7.32421766612684765896e-02, /* 0x3FB2BFFF, 0xD172B04C */
        -:  331:  5.83563508962056953777e+00, /* 0x401757B0, 0xB9953DD3 */
        -:  332:  1.35111577286449829671e+02, /* 0x4060E392, 0x0A8788E9 */
        -:  333:  1.02724376596164097464e+03, /* 0x40900CF9, 0x9DC8C481 */
        -:  334:  1.98997785864605384631e+03, /* 0x409F17E9, 0x53C6E3A6 */
        -:  335:};
        -:  336:#ifdef __STDC__
        -:  337:static const double qS5[6] = {
        -:  338:#else
        -:  339:static double qS5[6] = {
        -:  340:#endif
        -:  341:  8.27766102236537761883e+01, /* 0x4054B1B3, 0xFB5E1543 */
        -:  342:  2.07781416421392987104e+03, /* 0x40A03BA0, 0xDA21C0CE */
        -:  343:  1.88472887785718085070e+04, /* 0x40D267D2, 0x7B591E6D */
        -:  344:  5.67511122894947329769e+04, /* 0x40EBB5E3, 0x97E02372 */
        -:  345:  3.59767538425114471465e+04, /* 0x40E19118, 0x1F7A54A0 */
        -:  346: -5.35434275601944773371e+03, /* 0xC0B4EA57, 0xBEDBC609 */
        -:  347:};
        -:  348:
        -:  349:#ifdef __STDC__
        -:  350:static const double qR3[6] = {/* for x in [4.547,2.8571]=1/[0.2199,0.35001] */
        -:  351:#else
        -:  352:static double qR3[6] = {/* for x in [4.547,2.8571]=1/[0.2199,0.35001] */
        -:  353:#endif
        -:  354:  4.37741014089738620906e-09, /* 0x3E32CD03, 0x6ADECB82 */
        -:  355:  7.32411180042911447163e-02, /* 0x3FB2BFEE, 0x0E8D0842 */
        -:  356:  3.34423137516170720929e+00, /* 0x400AC0FC, 0x61149CF5 */
        -:  357:  4.26218440745412650017e+01, /* 0x40454F98, 0x962DAEDD */
        -:  358:  1.70808091340565596283e+02, /* 0x406559DB, 0xE25EFD1F */
        -:  359:  1.66733948696651168575e+02, /* 0x4064D77C, 0x81FA21E0 */
        -:  360:};
        -:  361:#ifdef __STDC__
        -:  362:static const double qS3[6] = {
        -:  363:#else
        -:  364:static double qS3[6] = {
        -:  365:#endif
        -:  366:  4.87588729724587182091e+01, /* 0x40486122, 0xBFE343A6 */
        -:  367:  7.09689221056606015736e+02, /* 0x40862D83, 0x86544EB3 */
        -:  368:  3.70414822620111362994e+03, /* 0x40ACF04B, 0xE44DFC63 */
        -:  369:  6.46042516752568917582e+03, /* 0x40B93C6C, 0xD7C76A28 */
        -:  370:  2.51633368920368957333e+03, /* 0x40A3A8AA, 0xD94FB1C0 */
        -:  371: -1.49247451836156386662e+02, /* 0xC062A7EB, 0x201CF40F */
        -:  372:};
        -:  373:
        -:  374:#ifdef __STDC__
        -:  375:static const double qR2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  376:#else
        -:  377:static double qR2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  378:#endif
        -:  379:  1.50444444886983272379e-07, /* 0x3E84313B, 0x54F76BDB */
        -:  380:  7.32234265963079278272e-02, /* 0x3FB2BEC5, 0x3E883E34 */
        -:  381:  1.99819174093815998816e+00, /* 0x3FFFF897, 0xE727779C */
        -:  382:  1.44956029347885735348e+01, /* 0x402CFDBF, 0xAAF96FE5 */
        -:  383:  3.16662317504781540833e+01, /* 0x403FAA8E, 0x29FBDC4A */
        -:  384:  1.62527075710929267416e+01, /* 0x403040B1, 0x71814BB4 */
        -:  385:};
        -:  386:#ifdef __STDC__
        -:  387:static const double qS2[6] = {
        -:  388:#else
        -:  389:static double qS2[6] = {
        -:  390:#endif
        -:  391:  3.03655848355219184498e+01, /* 0x403E5D96, 0xF7C07AED */
        -:  392:  2.69348118608049844624e+02, /* 0x4070D591, 0xE4D14B40 */
        -:  393:  8.44783757595320139444e+02, /* 0x408A6645, 0x22B3BF22 */
        -:  394:  8.82935845112488550512e+02, /* 0x408B977C, 0x9C5CC214 */
        -:  395:  2.12666388511798828631e+02, /* 0x406A9553, 0x0E001365 */
        -:  396: -5.31095493882666946917e+00, /* 0xC0153E6A, 0xF8B32931 */
        -:  397:};
        -:  398:
        -:  399:#ifdef __STDC__
function qzero called 1 returned 100% blocks executed 70%
        1:  400:	static double qzero(double x)
        -:  401:#else
        -:  402:	static double qzero(x)
        -:  403:	double x;
        -:  404:#endif
        -:  405:{
        -:  406:#ifdef __STDC__
        -:  407:	const double *p,*q;
        -:  408:#else
        -:  409:	double *p,*q;
        -:  410:#endif
        -:  411:	double s,r,z;
        -:  412:	int ix;
        1:  413:	ix = 0x7fffffff&__HI(x);
       1*:  414:	if(ix>=0x40200000)     {p = qR8; q= qS8;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       1*:  415:	else if(ix>=0x40122E8B){p = qR5; q= qS5;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       1*:  416:	else if(ix>=0x4006DB6D){p = qR3; q= qS3;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  417:	else if(ix>=0x40000000){p = qR2; q= qS2;}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  418:	z = one/(x*x);
        1:  419:	r = p[0]+z*(p[1]+z*(p[2]+z*(p[3]+z*(p[4]+z*p[5]))));
        1:  420:	s = one+z*(q[0]+z*(q[1]+z*(q[2]+z*(q[3]+z*(q[4]+z*q[5])))));
        1:  421:	return (-.125 + r/s)/x;
        -:  422:}
        -:  423://LCOV_EXCL_STOP
