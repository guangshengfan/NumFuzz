        -:    0:Source:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_j1y/build/foo_raw.c
        -:    0:Graph:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_j1y/build/foo_raw.gcno
        -:    0:Data:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_j1y/build/foo_raw.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* @(#)e_j1.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* __ieee754_j1(x), __ieee754_y1(x)
        -:   15: * Bessel function of the first and second kinds of order zero.
        -:   16: * Method -- j1(x):
        -:   17: *	1. For tiny x, we use j1(x) = x/2 - x^3/16 + x^5/384 - ...
        -:   18: *	2. Reduce x to |x| since j1(x)=-j1(-x),  and
        -:   19: *	   for x in (0,2)
        -:   20: *		j1(x) = x/2 + x*z*R0/S0,  where z = x*x;
        -:   21: *	   (precision:  |j1/x - 1/2 - R0/S0 |<2**-61.51 )
        -:   22: *	   for x in (2,inf)
        -:   23: * 		j1(x) = sqrt(2/(pi*x))*(p1(x)*cos(x1)-q1(x)*sin(x1))
        -:   24: * 		y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x1)+q1(x)*cos(x1))
        -:   25: * 	   where x1 = x-3*pi/4. It is better to compute sin(x1),cos(x1)
        -:   26: *	   as follow:
        -:   27: *		cos(x1) =  cos(x)cos(3pi/4)+sin(x)sin(3pi/4)
        -:   28: *			=  1/sqrt(2) * (sin(x) - cos(x))
        -:   29: *		sin(x1) =  sin(x)cos(3pi/4)-cos(x)sin(3pi/4)
        -:   30: *			= -1/sqrt(2) * (sin(x) + cos(x))
        -:   31: * 	   (To avoid cancellation, use
        -:   32: *		sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))
        -:   33: * 	    to compute the worse one.)
        -:   34: *	   
        -:   35: *	3 Special cases
        -:   36: *		j1(nan)= nan
        -:   37: *		j1(0) = 0
        -:   38: *		j1(inf) = 0
        -:   39: *		
        -:   40: * Method -- y1(x):
        -:   41: *	1. screen out x<=0 cases: y1(0)=-inf, y1(x<0)=NaN 
        -:   42: *	2. For x<2.
        -:   43: *	   Since 
        -:   44: *		y1(x) = 2/pi*(j1(x)*(ln(x/2)+Euler)-1/x-x/2+5/64*x^3-...)
        -:   45: *	   therefore y1(x)-2/pi*j1(x)*ln(x)-1/x is an odd function.
        -:   46: *	   We use the following function to approximate y1,
        -:   47: *		y1(x) = x*U(z)/V(z) + (2/pi)*(j1(x)*ln(x)-1/x), z= x^2
        -:   48: *	   where for x in [0,2] (abs err less than 2**-65.89)
        -:   49: *		U(z) = U0[0] + U0[1]*z + ... + U0[4]*z^4
        -:   50: *		V(z) = 1  + v0[0]*z + ... + v0[4]*z^5
        -:   51: *	   Note: For tiny x, 1/x dominate y1 and hence
        -:   52: *		y1(tiny) = -2/pi/tiny, (choose tiny<2**-54)
        -:   53: *	3. For x>=2.
        -:   54: * 		y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x1)+q1(x)*cos(x1))
        -:   55: * 	   where x1 = x-3*pi/4. It is better to compute sin(x1),cos(x1)
        -:   56: *	   by method mentioned above.
        -:   57: */
        -:   58:
        -:   59:#include "fdlibm.h"
        -:   60:
        -:   61:#ifdef __STDC__
        -:   62:static double pone(double), qone(double);
        -:   63:#else
        -:   64:static double pone(), qone();
        -:   65:#endif
        -:   66:
        -:   67:#ifdef __STDC__
        -:   68:static const double 
        -:   69:#else
        -:   70:static double 
        -:   71:#endif
        -:   72:huge    = 1e300,
        -:   73:one	= 1.0,
        -:   74:invsqrtpi=  5.64189583547756279280e-01, /* 0x3FE20DD7, 0x50429B6D */
        -:   75:tpi      =  6.36619772367581382433e-01, /* 0x3FE45F30, 0x6DC9C883 */
        -:   76:	/* R0/S0 on [0,2] */
        -:   77:r00  = -6.25000000000000000000e-02, /* 0xBFB00000, 0x00000000 */
        -:   78:r01  =  1.40705666955189706048e-03, /* 0x3F570D9F, 0x98472C61 */
        -:   79:r02  = -1.59955631084035597520e-05, /* 0xBEF0C5C6, 0xBA169668 */
        -:   80:r03  =  4.96727999609584448412e-08, /* 0x3E6AAAFA, 0x46CA0BD9 */
        -:   81:s01  =  1.91537599538363460805e-02, /* 0x3F939D0B, 0x12637E53 */
        -:   82:s02  =  1.85946785588630915560e-04, /* 0x3F285F56, 0xB9CDF664 */
        -:   83:s03  =  1.17718464042623683263e-06, /* 0x3EB3BFF8, 0x333F8498 */
        -:   84:s04  =  5.04636257076217042715e-09, /* 0x3E35AC88, 0xC97DFF2C */
        -:   85:s05  =  1.23542274426137913908e-11; /* 0x3DAB2ACF, 0xCFB97ED8 */
        -:   86:
        -:   87:static double zero    = 0.0;
        -:   88:
        -:   89:
        -:   90://LCOV_EXCL_START
        -:   91:#ifdef __STDC__
function __ieee754_j1 called 3 returned 100% blocks executed 35%
        3:   92:	double __ieee754_j1(double x) 
        -:   93:#else
        -:   94:	double __ieee754_j1(x) 
        -:   95:	double x;
        -:   96:#endif
        -:   97:{
        -:   98:	double z, s,c,ss,cc,r,u,v,y;
        -:   99:	int hx,ix;
        -:  100:
        3:  101:	hx = __HI(x);
        3:  102:	ix = hx&0x7fffffff;
       3*:  103:	if(ix>=0x7ff00000) return one/x;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        3:  104:	y = fabs(x);
        3:  105:	if(ix >= 0x40000000) {	/* |x| >= 2.0 */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  106:		s = sin(y);
    #####:  107:		c = cos(y);
    #####:  108:		ss = -s-c;
    #####:  109:		cc = s-c;
    #####:  110:		if(ix<0x7fe00000) {  /* make sure y+y not overflow */
branch  0 never executed
branch  1 never executed
    #####:  111:		    z = cos(y+y);
    #####:  112:		    if ((s*c)>zero) cc = z/ss;
branch  0 never executed
branch  1 never executed
    #####:  113:		    else 	    ss = z/cc;
        -:  114:		}
        -:  115:	/*
        -:  116:	 * j1(x) = 1/sqrt(pi) * (P(1,x)*cc - Q(1,x)*ss) / sqrt(x)
        -:  117:	 * y1(x) = 1/sqrt(pi) * (P(1,x)*ss + Q(1,x)*cc) / sqrt(x)
        -:  118:	 */
    #####:  119:		if(ix>0x48000000) z = (invsqrtpi*cc)/sqrt(y);
branch  0 never executed
branch  1 never executed
        -:  120:		else {
    #####:  121:		    u = pone(y); v = qone(y);
call    0 never executed
call    1 never executed
    #####:  122:		    z = invsqrtpi*(u*cc-v*ss)/sqrt(y);
        -:  123:		}
    #####:  124:		if(hx<0) return -z;
branch  0 never executed
branch  1 never executed
    #####:  125:		else  	 return  z;
        -:  126:	}
        3:  127:	if(ix<0x3e400000) {	/* |x|<2**-27 */
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1:  128:	    if(huge+x>one) return 0.5*x;/* inexact if x!=0 necessary */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  129:	}
        2:  130:	z = x*x;
        2:  131:	r =  z*(r00+z*(r01+z*(r02+z*r03)));
        2:  132:	s =  one+z*(s01+z*(s02+z*(s03+z*(s04+z*s05))));
        2:  133:	r *= x;
        2:  134:	return(x*0.5+r/s);
        -:  135:}
        -:  136://LCOV_EXCL_STOP
        -:  137:
        -:  138:#ifdef __STDC__
        -:  139:static const double U0[5] = {
        -:  140:#else
        -:  141:static double U0[5] = {
        -:  142:#endif
        -:  143: -1.96057090646238940668e-01, /* 0xBFC91866, 0x143CBC8A */
        -:  144:  5.04438716639811282616e-02, /* 0x3FA9D3C7, 0x76292CD1 */
        -:  145: -1.91256895875763547298e-03, /* 0xBF5F55E5, 0x4844F50F */
        -:  146:  2.35252600561610495928e-05, /* 0x3EF8AB03, 0x8FA6B88E */
        -:  147: -9.19099158039878874504e-08, /* 0xBE78AC00, 0x569105B8 */
        -:  148:};
        -:  149:#ifdef __STDC__
        -:  150:static const double V0[5] = {
        -:  151:#else
        -:  152:static double V0[5] = {
        -:  153:#endif
        -:  154:  1.99167318236649903973e-02, /* 0x3F94650D, 0x3F4DA9F0 */
        -:  155:  2.02552581025135171496e-04, /* 0x3F2A8C89, 0x6C257764 */
        -:  156:  1.35608801097516229404e-06, /* 0x3EB6C05A, 0x894E8CA6 */
        -:  157:  6.22741452364621501295e-09, /* 0x3E3ABF1D, 0x5BA69A86 */
        -:  158:  1.66559246207992079114e-11, /* 0x3DB25039, 0xDACA772A */
        -:  159:};
        -:  160:
        -:  161:#ifdef __STDC__
function foo_raw called 30 returned 100% blocks executed 100%
       30:  162:	double foo_raw(double x) 
        -:  163:#else
        -:  164:	double foo_raw(x) 
        -:  165:	double x;
        -:  166:#endif
        -:  167:{
        -:  168:	double z, s,c,ss,cc,u,v;
        -:  169:	int hx,ix,lx;
        -:  170:
       30:  171:        hx = __HI(x);
       30:  172:        ix = 0x7fffffff&hx;
       30:  173:        lx = __LO(x);
        -:  174:    /* if Y1(NaN) is NaN, Y1(-inf) is NaN, Y1(inf) is 0 */
       30:  175:	if(ix>=0x7ff00000) return  one/(x+x*x); 
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       29:  176:        if((ix|lx)==0) return -one/zero;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
       28:  177:        if(hx<0) return zero/zero;
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
       13:  178:        if(ix >= 0x40000000) {  /* |x| >= 2.0 */
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        9:  179:                s = sin(x);
        9:  180:                c = cos(x);
        9:  181:                ss = -s-c;
        9:  182:                cc = s-c;
        9:  183:                if(ix<0x7fe00000) {  /* make sure x+x not overflow */
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        7:  184:                    z = cos(x+x);
        7:  185:                    if ((s*c)>zero) cc = z/ss;
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
        3:  186:                    else            ss = z/cc;
        -:  187:                }
        -:  188:        /* y1(x) = sqrt(2/(pi*x))*(p1(x)*sin(x0)+q1(x)*cos(x0))
        -:  189:         * where x0 = x-3pi/4
        -:  190:         *      Better formula:
        -:  191:         *              cos(x0) = cos(x)cos(3pi/4)+sin(x)sin(3pi/4)
        -:  192:         *                      =  1/sqrt(2) * (sin(x) - cos(x))
        -:  193:         *              sin(x0) = sin(x)cos(3pi/4)-cos(x)sin(3pi/4)
        -:  194:         *                      = -1/sqrt(2) * (cos(x) + sin(x))
        -:  195:         * To avoid cancellation, use
        -:  196:         *              sin(x) +- cos(x) = -cos(2x)/(sin(x) -+ cos(x))
        -:  197:         * to compute the worse one.
        -:  198:         */
        9:  199:                if(ix>0x48000000) z = (invsqrtpi*ss)/sqrt(x);
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -:  200:                else {
        5:  201:                    u = pone(x); v = qone(x);
call    0 returned 100%
call    1 returned 100%
        5:  202:                    z = invsqrtpi*(u*ss+v*cc)/sqrt(x);
        -:  203:                }
        9:  204:                return z;
        -:  205:        } 
        4:  206:        if(ix<=0x3c900000) {    /* x < 2**-54 */
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:  207:            return(-tpi/x);
        -:  208:        } 
        3:  209:        z = x*x;
        3:  210:        u = U0[0]+z*(U0[1]+z*(U0[2]+z*(U0[3]+z*U0[4])));
        3:  211:        v = one+z*(V0[0]+z*(V0[1]+z*(V0[2]+z*(V0[3]+z*V0[4]))));
        3:  212:        return(x*(u/v) + tpi*(__ieee754_j1(x)*__ieee754_log(x)-one/x));
call    0 returned 100%
call    1 returned 100%
        -:  213:}
        -:  214:
        -:  215:/* For x >= 8, the asymptotic expansions of pone is
        -:  216: *	1 + 15/128 s^2 - 4725/2^15 s^4 - ...,	where s = 1/x.
        -:  217: * We approximate pone by
        -:  218: * 	pone(x) = 1 + (R/S)
        -:  219: * where  R = pr0 + pr1*s^2 + pr2*s^4 + ... + pr5*s^10
        -:  220: * 	  S = 1 + ps0*s^2 + ... + ps4*s^10
        -:  221: * and
        -:  222: *	| pone(x)-1-R/S | <= 2  ** ( -60.06)
        -:  223: */
        -:  224:
        -:  225:#ifdef __STDC__
        -:  226:static const double pr8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  227:#else
        -:  228:static double pr8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  229:#endif
        -:  230:  0.00000000000000000000e+00, /* 0x00000000, 0x00000000 */
        -:  231:  1.17187499999988647970e-01, /* 0x3FBDFFFF, 0xFFFFFCCE */
        -:  232:  1.32394806593073575129e+01, /* 0x402A7A9D, 0x357F7FCE */
        -:  233:  4.12051854307378562225e+02, /* 0x4079C0D4, 0x652EA590 */
        -:  234:  3.87474538913960532227e+03, /* 0x40AE457D, 0xA3A532CC */
        -:  235:  7.91447954031891731574e+03, /* 0x40BEEA7A, 0xC32782DD */
        -:  236:};
        -:  237:#ifdef __STDC__
        -:  238:static const double ps8[5] = {
        -:  239:#else
        -:  240:static double ps8[5] = {
        -:  241:#endif
        -:  242:  1.14207370375678408436e+02, /* 0x405C8D45, 0x8E656CAC */
        -:  243:  3.65093083420853463394e+03, /* 0x40AC85DC, 0x964D274F */
        -:  244:  3.69562060269033463555e+04, /* 0x40E20B86, 0x97C5BB7F */
        -:  245:  9.76027935934950801311e+04, /* 0x40F7D42C, 0xB28F17BB */
        -:  246:  3.08042720627888811578e+04, /* 0x40DE1511, 0x697A0B2D */
        -:  247:};
        -:  248:
        -:  249:#ifdef __STDC__
        -:  250:static const double pr5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  251:#else
        -:  252:static double pr5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  253:#endif
        -:  254:  1.31990519556243522749e-11, /* 0x3DAD0667, 0xDAE1CA7D */
        -:  255:  1.17187493190614097638e-01, /* 0x3FBDFFFF, 0xE2C10043 */
        -:  256:  6.80275127868432871736e+00, /* 0x401B3604, 0x6E6315E3 */
        -:  257:  1.08308182990189109773e+02, /* 0x405B13B9, 0x452602ED */
        -:  258:  5.17636139533199752805e+02, /* 0x40802D16, 0xD052D649 */
        -:  259:  5.28715201363337541807e+02, /* 0x408085B8, 0xBB7E0CB7 */
        -:  260:};
        -:  261:#ifdef __STDC__
        -:  262:static const double ps5[5] = {
        -:  263:#else
        -:  264:static double ps5[5] = {
        -:  265:#endif
        -:  266:  5.92805987221131331921e+01, /* 0x404DA3EA, 0xA8AF633D */
        -:  267:  9.91401418733614377743e+02, /* 0x408EFB36, 0x1B066701 */
        -:  268:  5.35326695291487976647e+03, /* 0x40B4E944, 0x5706B6FB */
        -:  269:  7.84469031749551231769e+03, /* 0x40BEA4B0, 0xB8A5BB15 */
        -:  270:  1.50404688810361062679e+03, /* 0x40978030, 0x036F5E51 */
        -:  271:};
        -:  272:
        -:  273:#ifdef __STDC__
        -:  274:static const double pr3[6] = {
        -:  275:#else
        -:  276:static double pr3[6] = {/* for x in [4.547,2.8571]=1/[0.2199,0.35001] */
        -:  277:#endif
        -:  278:  3.02503916137373618024e-09, /* 0x3E29FC21, 0xA7AD9EDD */
        -:  279:  1.17186865567253592491e-01, /* 0x3FBDFFF5, 0x5B21D17B */
        -:  280:  3.93297750033315640650e+00, /* 0x400F76BC, 0xE85EAD8A */
        -:  281:  3.51194035591636932736e+01, /* 0x40418F48, 0x9DA6D129 */
        -:  282:  9.10550110750781271918e+01, /* 0x4056C385, 0x4D2C1837 */
        -:  283:  4.85590685197364919645e+01, /* 0x4048478F, 0x8EA83EE5 */
        -:  284:};
        -:  285:#ifdef __STDC__
        -:  286:static const double ps3[5] = {
        -:  287:#else
        -:  288:static double ps3[5] = {
        -:  289:#endif
        -:  290:  3.47913095001251519989e+01, /* 0x40416549, 0xA134069C */
        -:  291:  3.36762458747825746741e+02, /* 0x40750C33, 0x07F1A75F */
        -:  292:  1.04687139975775130551e+03, /* 0x40905B7C, 0x5037D523 */
        -:  293:  8.90811346398256432622e+02, /* 0x408BD67D, 0xA32E31E9 */
        -:  294:  1.03787932439639277504e+02, /* 0x4059F26D, 0x7C2EED53 */
        -:  295:};
        -:  296:
        -:  297:#ifdef __STDC__
        -:  298:static const double pr2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  299:#else
        -:  300:static double pr2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  301:#endif
        -:  302:  1.07710830106873743082e-07, /* 0x3E7CE9D4, 0xF65544F4 */
        -:  303:  1.17176219462683348094e-01, /* 0x3FBDFF42, 0xBE760D83 */
        -:  304:  2.36851496667608785174e+00, /* 0x4002F2B7, 0xF98FAEC0 */
        -:  305:  1.22426109148261232917e+01, /* 0x40287C37, 0x7F71A964 */
        -:  306:  1.76939711271687727390e+01, /* 0x4031B1A8, 0x177F8EE2 */
        -:  307:  5.07352312588818499250e+00, /* 0x40144B49, 0xA574C1FE */
        -:  308:};
        -:  309:#ifdef __STDC__
        -:  310:static const double ps2[5] = {
        -:  311:#else
        -:  312:static double ps2[5] = {
        -:  313:#endif
        -:  314:  2.14364859363821409488e+01, /* 0x40356FBD, 0x8AD5ECDC */
        -:  315:  1.25290227168402751090e+02, /* 0x405F5293, 0x14F92CD5 */
        -:  316:  2.32276469057162813669e+02, /* 0x406D08D8, 0xD5A2DBD9 */
        -:  317:  1.17679373287147100768e+02, /* 0x405D6B7A, 0xDA1884A9 */
        -:  318:  8.36463893371618283368e+00, /* 0x4020BAB1, 0xF44E5192 */
        -:  319:};
        -:  320:
        -:  321://LCOV_EXCL_START
        -:  322:#ifdef __STDC__
function pone called 5 returned 100% blocks executed 80%
        5:  323:	static double pone(double x)
        -:  324:#else
        -:  325:	static double pone(x)
        -:  326:	double x;
        -:  327:#endif
        -:  328:{
        -:  329:#ifdef __STDC__
        -:  330:	const double *p,*q;
        -:  331:#else
        -:  332:	double *p,*q;
        -:  333:#endif
        -:  334:	double z,r,s;
        -:  335:        int ix;
        5:  336:        ix = 0x7fffffff&__HI(x);
        5:  337:        if(ix>=0x40200000)     {p = pr8; q= ps8;}
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       1*:  338:        else if(ix>=0x40122E8B){p = pr5; q= ps5;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       1*:  339:        else if(ix>=0x4006DB6D){p = pr3; q= ps3;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  340:        else if(ix>=0x40000000){p = pr2; q= ps2;}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  341:        z = one/(x*x);
        5:  342:        r = p[0]+z*(p[1]+z*(p[2]+z*(p[3]+z*(p[4]+z*p[5]))));
        5:  343:        s = one+z*(q[0]+z*(q[1]+z*(q[2]+z*(q[3]+z*q[4]))));
        5:  344:        return one+ r/s;
        -:  345:}
        -:  346:		
        -:  347:
        -:  348:/* For x >= 8, the asymptotic expansions of qone is
        -:  349: *	3/8 s - 105/1024 s^3 - ..., where s = 1/x.
        -:  350: * We approximate pone by
        -:  351: * 	qone(x) = s*(0.375 + (R/S))
        -:  352: * where  R = qr1*s^2 + qr2*s^4 + ... + qr5*s^10
        -:  353: * 	  S = 1 + qs1*s^2 + ... + qs6*s^12
        -:  354: * and
        -:  355: *	| qone(x)/s -0.375-R/S | <= 2  ** ( -61.13)
        -:  356: */
        -:  357:
        -:  358:#ifdef __STDC__
        -:  359:static const double qr8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  360:#else
        -:  361:static double qr8[6] = { /* for x in [inf, 8]=1/[0,0.125] */
        -:  362:#endif
        -:  363:  0.00000000000000000000e+00, /* 0x00000000, 0x00000000 */
        -:  364: -1.02539062499992714161e-01, /* 0xBFBA3FFF, 0xFFFFFDF3 */
        -:  365: -1.62717534544589987888e+01, /* 0xC0304591, 0xA26779F7 */
        -:  366: -7.59601722513950107896e+02, /* 0xC087BCD0, 0x53E4B576 */
        -:  367: -1.18498066702429587167e+04, /* 0xC0C724E7, 0x40F87415 */
        -:  368: -4.84385124285750353010e+04, /* 0xC0E7A6D0, 0x65D09C6A */
        -:  369:};
        -:  370:#ifdef __STDC__
        -:  371:static const double qs8[6] = {
        -:  372:#else
        -:  373:static double qs8[6] = {
        -:  374:#endif
        -:  375:  1.61395369700722909556e+02, /* 0x40642CA6, 0xDE5BCDE5 */
        -:  376:  7.82538599923348465381e+03, /* 0x40BE9162, 0xD0D88419 */
        -:  377:  1.33875336287249578163e+05, /* 0x4100579A, 0xB0B75E98 */
        -:  378:  7.19657723683240939863e+05, /* 0x4125F653, 0x72869C19 */
        -:  379:  6.66601232617776375264e+05, /* 0x412457D2, 0x7719AD5C */
        -:  380: -2.94490264303834643215e+05, /* 0xC111F969, 0x0EA5AA18 */
        -:  381:};
        -:  382:
        -:  383:#ifdef __STDC__
        -:  384:static const double qr5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  385:#else
        -:  386:static double qr5[6] = { /* for x in [8,4.5454]=1/[0.125,0.22001] */
        -:  387:#endif
        -:  388: -2.08979931141764104297e-11, /* 0xBDB6FA43, 0x1AA1A098 */
        -:  389: -1.02539050241375426231e-01, /* 0xBFBA3FFF, 0xCB597FEF */
        -:  390: -8.05644828123936029840e+00, /* 0xC0201CE6, 0xCA03AD4B */
        -:  391: -1.83669607474888380239e+02, /* 0xC066F56D, 0x6CA7B9B0 */
        -:  392: -1.37319376065508163265e+03, /* 0xC09574C6, 0x6931734F */
        -:  393: -2.61244440453215656817e+03, /* 0xC0A468E3, 0x88FDA79D */
        -:  394:};
        -:  395:#ifdef __STDC__
        -:  396:static const double qs5[6] = {
        -:  397:#else
        -:  398:static double qs5[6] = {
        -:  399:#endif
        -:  400:  8.12765501384335777857e+01, /* 0x405451B2, 0xFF5A11B2 */
        -:  401:  1.99179873460485964642e+03, /* 0x409F1F31, 0xE77BF839 */
        -:  402:  1.74684851924908907677e+04, /* 0x40D10F1F, 0x0D64CE29 */
        -:  403:  4.98514270910352279316e+04, /* 0x40E8576D, 0xAABAD197 */
        -:  404:  2.79480751638918118260e+04, /* 0x40DB4B04, 0xCF7C364B */
        -:  405: -4.71918354795128470869e+03, /* 0xC0B26F2E, 0xFCFFA004 */
        -:  406:};
        -:  407:
        -:  408:#ifdef __STDC__
        -:  409:static const double qr3[6] = {
        -:  410:#else
        -:  411:static double qr3[6] = {/* for x in [4.547,2.8571]=1/[0.2199,0.35001] */
        -:  412:#endif
        -:  413: -5.07831226461766561369e-09, /* 0xBE35CFA9, 0xD38FC84F */
        -:  414: -1.02537829820837089745e-01, /* 0xBFBA3FEB, 0x51AEED54 */
        -:  415: -4.61011581139473403113e+00, /* 0xC01270C2, 0x3302D9FF */
        -:  416: -5.78472216562783643212e+01, /* 0xC04CEC71, 0xC25D16DA */
        -:  417: -2.28244540737631695038e+02, /* 0xC06C87D3, 0x4718D55F */
        -:  418: -2.19210128478909325622e+02, /* 0xC06B66B9, 0x5F5C1BF6 */
        -:  419:};
        -:  420:#ifdef __STDC__
        -:  421:static const double qs3[6] = {
        -:  422:#else
        -:  423:static double qs3[6] = {
        -:  424:#endif
        -:  425:  4.76651550323729509273e+01, /* 0x4047D523, 0xCCD367E4 */
        -:  426:  6.73865112676699709482e+02, /* 0x40850EEB, 0xC031EE3E */
        -:  427:  3.38015286679526343505e+03, /* 0x40AA684E, 0x448E7C9A */
        -:  428:  5.54772909720722782367e+03, /* 0x40B5ABBA, 0xA61D54A6 */
        -:  429:  1.90311919338810798763e+03, /* 0x409DBC7A, 0x0DD4DF4B */
        -:  430: -1.35201191444307340817e+02, /* 0xC060E670, 0x290A311F */
        -:  431:};
        -:  432:
        -:  433:#ifdef __STDC__
        -:  434:static const double qr2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  435:#else
        -:  436:static double qr2[6] = {/* for x in [2.8570,2]=1/[0.3499,0.5] */
        -:  437:#endif
        -:  438: -1.78381727510958865572e-07, /* 0xBE87F126, 0x44C626D2 */
        -:  439: -1.02517042607985553460e-01, /* 0xBFBA3E8E, 0x9148B010 */
        -:  440: -2.75220568278187460720e+00, /* 0xC0060484, 0x69BB4EDA */
        -:  441: -1.96636162643703720221e+01, /* 0xC033A9E2, 0xC168907F */
        -:  442: -4.23253133372830490089e+01, /* 0xC04529A3, 0xDE104AAA */
        -:  443: -2.13719211703704061733e+01, /* 0xC0355F36, 0x39CF6E52 */
        -:  444:};
        -:  445:#ifdef __STDC__
        -:  446:static const double qs2[6] = {
        -:  447:#else
        -:  448:static double qs2[6] = {
        -:  449:#endif
        -:  450:  2.95333629060523854548e+01, /* 0x403D888A, 0x78AE64FF */
        -:  451:  2.52981549982190529136e+02, /* 0x406F9F68, 0xDB821CBA */
        -:  452:  7.57502834868645436472e+02, /* 0x4087AC05, 0xCE49A0F7 */
        -:  453:  7.39393205320467245656e+02, /* 0x40871B25, 0x48D4C029 */
        -:  454:  1.55949003336666123687e+02, /* 0x40637E5E, 0x3C3ED8D4 */
        -:  455: -4.95949898822628210127e+00, /* 0xC013D686, 0xE71BE86B */
        -:  456:};
        -:  457:
        -:  458:#ifdef __STDC__
function qone called 5 returned 100% blocks executed 80%
        5:  459:	static double qone(double x)
        -:  460:#else
        -:  461:	static double qone(x)
        -:  462:	double x;
        -:  463:#endif
        -:  464:{
        -:  465:#ifdef __STDC__
        -:  466:	const double *p,*q;
        -:  467:#else
        -:  468:	double *p,*q;
        -:  469:#endif
        -:  470:	double  s,r,z;
        -:  471:	int ix;
        5:  472:	ix = 0x7fffffff&__HI(x);
        5:  473:	if(ix>=0x40200000)     {p = qr8; q= qs8;}
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       1*:  474:	else if(ix>=0x40122E8B){p = qr5; q= qs5;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       1*:  475:	else if(ix>=0x4006DB6D){p = qr3; q= qs3;}
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        1:  476:	else if(ix>=0x40000000){p = qr2; q= qs2;}
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:  477:	z = one/(x*x);
        5:  478:	r = p[0]+z*(p[1]+z*(p[2]+z*(p[3]+z*(p[4]+z*p[5]))));
        5:  479:	s = one+z*(q[0]+z*(q[1]+z*(q[2]+z*(q[3]+z*(q[4]+z*q[5])))));
        5:  480:	return (.375 + r/s)/x;
        -:  481:}
        -:  482://LCOV_EXCL_STOP
