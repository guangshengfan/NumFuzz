        -:    0:Source:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_log10/build/foo_raw.c
        -:    0:Graph:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_log10/build/foo_raw.gcno
        -:    0:Data:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_log10/build/foo_raw.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* @(#)e_log10.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* __ieee754_log10(x)
        -:   15: * Return the base 10 logarithm of x
        -:   16: * 
        -:   17: * Method :
        -:   18: *	Let log10_2hi = leading 40 bits of log10(2) and
        -:   19: *	    log10_2lo = log10(2) - log10_2hi,
        -:   20: *	    ivln10   = 1/log(10) rounded.
        -:   21: *	Then
        -:   22: *		n = ilogb(x), 
        -:   23: *		if(n<0)  n = n+1;
        -:   24: *		x = scalbn(x,-n);
        -:   25: *		log10(x) := n*log10_2hi + (n*log10_2lo + ivln10*log(x))
        -:   26: *
        -:   27: * Note 1:
        -:   28: *	To guarantee log10(10**n)=n, where 10**n is normal, the rounding 
        -:   29: *	mode must set to Round-to-Nearest.
        -:   30: * Note 2:
        -:   31: *	[1/log(10)] rounded to 53 bits has error  .198   ulps;
        -:   32: *	log10 is monotonic at all binary break points.
        -:   33: *
        -:   34: * Special cases:
        -:   35: *	log10(x) is NaN with signal if x < 0; 
        -:   36: *	log10(+INF) is +INF with no signal; log10(0) is -INF with signal;
        -:   37: *	log10(NaN) is that NaN with no signal;
        -:   38: *	log10(10**N) = N  for N=0,1,...,22.
        -:   39: *
        -:   40: * Constants:
        -:   41: * The hexadecimal values are the intended ones for the following constants.
        -:   42: * The decimal values may be used, provided that the compiler will convert
        -:   43: * from decimal to binary accurately enough to produce the hexadecimal values
        -:   44: * shown.
        -:   45: */
        -:   46:
        -:   47:#include "fdlibm.h"
        -:   48:
        -:   49:#ifdef __STDC__
        -:   50:static const double
        -:   51:#else
        -:   52:static double
        -:   53:#endif
        -:   54:two54      =  1.80143985094819840000e+16, /* 0x43500000, 0x00000000 */
        -:   55:ivln10     =  4.34294481903251816668e-01, /* 0x3FDBCB7B, 0x1526E50E */
        -:   56:log10_2hi  =  3.01029995663611771306e-01, /* 0x3FD34413, 0x509F6000 */
        -:   57:log10_2lo  =  3.69423907715893078616e-13; /* 0x3D59FEF3, 0x11F12B36 */
        -:   58:
        -:   59:static double zero   =  0.0;
        -:   60:
        -:   61:#ifdef __STDC__
function foo_raw called 14 returned 100% blocks executed 91%
       14:   62:	double foo_raw(double x)
        -:   63:#else
        -:   64:	double foo_raw(x)
        -:   65:	double x;
        -:   66:#endif
        -:   67:{
        -:   68:	double y,z;
        -:   69:	int i,k,hx;
        -:   70:	unsigned lx;
        -:   71:
       14:   72:	hx = __HI(x);	/* high word of x */
       14:   73:	lx = __LO(x);	/* low word of x */
        -:   74:
       14:   75:        k=0;
       14:   76:        if (hx < 0x00100000) {                  /* x < 2**-1022  */
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
       10:   77:            if (((hx&0x7fffffff)|lx)==0)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        1:   78:                return -two54/zero;             /* log(+-0)=-inf */
        9:   79:            if (hx<0) return (x-x)/zero;        /* log(-#) = NaN */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    #####:   80:            k -= 54; x *= two54; /* subnormal number, scale up x */
    #####:   81:            hx = __HI(x);                /* high word of x */
        -:   82:        }
        4:   83:	if (hx >= 0x7ff00000) return x+x;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   84:	k += (hx>>20)-1023;
        2:   85:	i  = ((unsigned)k&0x80000000)>>31;
        2:   86:        hx = (hx&0x000fffff)|((0x3ff-i)<<20);
        2:   87:        y  = (double)(k+i);
        2:   88:        __HI(x) = hx;
        2:   89:	z  = y*log10_2lo + ivln10*__ieee754_log(x);
call    0 returned 100%
        2:   90:	return  z+y*log10_2hi;
        -:   91:}
