        -:    0:Source:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_atan2/build/foo_raw.c
        -:    0:Graph:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_atan2/build/foo_raw.gcno
        -:    0:Data:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_atan2/build/foo_raw.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* @(#)e_atan2.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: *
        -:   13: */
        -:   14:
        -:   15:/* __ieee754_atan2(y,x)
        -:   16: * Method :
        -:   17: *	1. Reduce y to positive by atan2(y,x)=-atan2(-y,x).
        -:   18: *	2. Reduce x to positive by (if x and y are unexceptional): 
        -:   19: *		ARG (x+iy) = arctan(y/x)   	   ... if x > 0,
        -:   20: *		ARG (x+iy) = pi - arctan[y/(-x)]   ... if x < 0,
        -:   21: *
        -:   22: * Special cases:
        -:   23: *
        -:   24: *	ATAN2((anything), NaN ) is NaN;
        -:   25: *	ATAN2(NAN , (anything) ) is NaN;
        -:   26: *	ATAN2(+-0, +(anything but NaN)) is +-0  ;
        -:   27: *	ATAN2(+-0, -(anything but NaN)) is +-pi ;
        -:   28: *	ATAN2(+-(anything but 0 and NaN), 0) is +-pi/2;
        -:   29: *	ATAN2(+-(anything but INF and NaN), +INF) is +-0 ;
        -:   30: *	ATAN2(+-(anything but INF and NaN), -INF) is +-pi;
        -:   31: *	ATAN2(+-INF,+INF ) is +-pi/4 ;
        -:   32: *	ATAN2(+-INF,-INF ) is +-3pi/4;
        -:   33: *	ATAN2(+-INF, (anything but,0,NaN, and INF)) is +-pi/2;
        -:   34: *
        -:   35: * Constants:
        -:   36: * The hexadecimal values are the intended ones for the following 
        -:   37: * constants. The decimal values may be used, provided that the 
        -:   38: * compiler will convert from decimal to binary accurately enough 
        -:   39: * to produce the hexadecimal values shown.
        -:   40: */
        -:   41:
        -:   42:#include "fdlibm.h"
        -:   43:
        -:   44:#ifdef __STDC__
        -:   45:static const double 
        -:   46:#else
        -:   47:static double 
        -:   48:#endif
        -:   49:tiny  = 1.0e-300,
        -:   50:zero  = 0.0,
        -:   51:pi_o_4  = 7.8539816339744827900E-01, /* 0x3FE921FB, 0x54442D18 */
        -:   52:pi_o_2  = 1.5707963267948965580E+00, /* 0x3FF921FB, 0x54442D18 */
        -:   53:pi      = 3.1415926535897931160E+00, /* 0x400921FB, 0x54442D18 */
        -:   54:pi_lo   = 1.2246467991473531772E-16; /* 0x3CA1A626, 0x33145C07 */
        -:   55:
        -:   56:#ifdef __STDC__
function foo_raw called 32 returned 100% blocks executed 64%
       32:   57:	double foo_raw(double y, double x)
        -:   58:#else
        -:   59:	double foo_raw(y,x)
        -:   60:	double  y,x;
        -:   61:#endif
        -:   62:{  
        -:   63:	double z;
        -:   64:	int k,m,hx,hy,ix,iy;
        -:   65:	unsigned lx,ly;
        -:   66:
       32:   67:	hx = __HI(x); ix = hx&0x7fffffff;
       32:   68:	lx = __LO(x);
       32:   69:	hy = __HI(y); iy = hy&0x7fffffff;
       32:   70:	ly = __LO(y);
       32:   71:	if(((ix|((lx|-lx)>>31))>0x7ff00000)||
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
       31:   72:	   ((iy|((ly|-ly)>>31))>0x7ff00000))	/* x or y is NaN */
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        4:   73:	   return x+y;
       28:   74:	if((hx-0x3ff00000|lx)==0) return atan(y);   /* x=1.0 */
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       27:   75:	m = ((hy>>31)&1)|((hx>>30)&2);	/* 2*sign(x)+sign(y) */
        -:   76:
        -:   77:    /* when y = 0 */
       27:   78:	if((iy|ly)==0) {
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        1:   79:	    switch(m) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
        1:   80:		case 0: 
        1:   81:		case 1: return y; 	/* atan(+-0,+anything)=+-0 */
    #####:   82:		case 2: return  pi+tiny;/* atan(+0,-anything) = pi */
    #####:   83:		case 3: return -pi-tiny;/* atan(-0,-anything) =-pi */
        -:   84:	    }
        -:   85:	}
        -:   86:    /* when x = 0 */
      26*:   87:	if((ix|lx)==0) return (hy<0)?  -pi_o_2-tiny: pi_o_2+tiny;
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   88:	    
        -:   89:    /* when x is INF */
       25:   90:	if(ix==0x7ff00000) {
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        2:   91:	    if(iy==0x7ff00000) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   92:		switch(m) {
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 50%
branch  4 taken 0%
        1:   93:		    case 0: return  pi_o_4+tiny;/* atan(+INF,+INF) */
    #####:   94:		    case 1: return -pi_o_4-tiny;/* atan(-INF,+INF) */
    #####:   95:		    case 2: return  3.0*pi_o_4+tiny;/*atan(+INF,-INF)*/
        1:   96:		    case 3: return -3.0*pi_o_4-tiny;/*atan(-INF,-INF)*/
        -:   97:		}
        -:   98:	    } else {
    #####:   99:		switch(m) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####:  100:		    case 0: return  zero  ;	/* atan(+...,+INF) */
    #####:  101:		    case 1: return -zero  ;	/* atan(-...,+INF) */
    #####:  102:		    case 2: return  pi+tiny  ;	/* atan(+...,-INF) */
    #####:  103:		    case 3: return -pi-tiny  ;	/* atan(-...,-INF) */
        -:  104:		}
        -:  105:	    }
        -:  106:	}
        -:  107:    /* when y is INF */
      23*:  108:	if(iy==0x7ff00000) return (hy<0)? -pi_o_2-tiny: pi_o_2+tiny;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  109:
        -:  110:    /* compute y/x */
       23:  111:	k = (iy-ix)>>20;
      23*:  112:	if(k > 60) z=pi_o_2+0.5*pi_lo; 	/* |y/x| >  2**60 */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      23*:  113:	else if(hx<0&&k<-60) z=0.0; 	/* |y|/x < -2**60 */
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       23:  114:	else z=atan(fabs(y/x));		/* safe to do y/x */
       23:  115:	switch (m) {
branch  0 taken 39%
branch  1 taken 9%
branch  2 taken 13%
branch  3 taken 39%
        9:  116:	    case 0: return       z  ;	/* atan(+,+) */
        2:  117:	    case 1: __HI(z) ^= 0x80000000;
        2:  118:		    return       z  ;	/* atan(-,+) */
        3:  119:	    case 2: return  pi-(z-pi_lo);/* atan(+,-) */
        9:  120:	    default: /* case 3 */
        9:  121:	    	    return  (z-pi_lo)-pi;/* atan(-,-) */
        -:  122:	}
        -:  123:}
