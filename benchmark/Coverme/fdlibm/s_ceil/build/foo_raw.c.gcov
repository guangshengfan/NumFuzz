        -:    0:Source:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/s_ceil/build/foo_raw.c
        -:    0:Graph:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/s_ceil/build/foo_raw.gcno
        -:    0:Data:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/s_ceil/build/foo_raw.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* @(#)s_ceil.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/*
        -:   15: * ceil(x)
        -:   16: * Return x rounded toward -inf to integral value
        -:   17: * Method:
        -:   18: *	Bit twiddling.
        -:   19: * Exception:
        -:   20: *	Inexact flag raised if x not equal to ceil(x).
        -:   21: */
        -:   22:
        -:   23:#include "fdlibm.h"
        -:   24:
        -:   25:#ifdef __STDC__
        -:   26:static const double huge = 1.0e300;
        -:   27:#else
        -:   28:static double huge = 1.0e300;
        -:   29:#endif
        -:   30:
        -:   31:#ifdef __STDC__
function foo_raw called 48 returned 100% blocks executed 93%
       48:   32:	double foo_raw(double x)
        -:   33:#else
        -:   34:	double foo_raw(x)
        -:   35:	double x;
        -:   36:#endif
        -:   37:{
        -:   38:	int i0,i1,j0;
        -:   39:	unsigned i,j;
       48:   40:	i0 =  __HI(x);
       48:   41:	i1 =  __LO(x);
       48:   42:	j0 = ((i0>>20)&0x7ff)-0x3ff;
       48:   43:	if(j0<20) {
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
       37:   44:	    if(j0<0) { 	/* raise inexact if x != 0 */
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
       34:   45:		if(huge+x>0.0) {/* return 0*sign(x) if |x|<1 */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       34:   46:		    if(i0<0) {i0=0x80000000;i1=0;} 
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
       21:   47:		    else if((i0|i1)!=0) { i0=0x3ff00000;i1=0;}
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:   48:		}
        -:   49:	    } else {
        3:   50:		i = (0x000fffff)>>j0;
        3:   51:		if(((i0&i)|i1)==0) return x; /* x is integral */
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:   52:		if(huge+x>0.0) {	/* raise inexact flag */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   53:		    if(i0>0) i0 += (0x00100000)>>j0;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   54:		    i0 &= (~i); i1=0;
        -:   55:		}
        -:   56:	    }
       11:   57:	} else if (j0>51) {
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        5:   58:	    if(j0==0x400) return x+x;	/* inf or NaN */
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        1:   59:	    else return x;		/* x is integral */
        -:   60:	} else {
        6:   61:	    i = ((unsigned)(0xffffffff))>>(j0-20);
        6:   62:	    if((i1&i)==0) return x;	/* x is integral */
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        4:   63:	    if(huge+x>0.0) { 		/* raise inexact flag */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   64:		if(i0>0) {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       3*:   65:		    if(j0==20) i0+=1; 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   66:		    else {
        3:   67:			j = i1 + (1<<(52-j0));
       3*:   68:			if(j<i1) i0+=1;	/* got a carry */
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        3:   69:			i1 = j;
        -:   70:		    }
        -:   71:		}
        4:   72:		i1 &= (~i);
        -:   73:	    }
        -:   74:	}
       40:   75:	__HI(x) = i0;
       40:   76:	__LO(x) = i1;
       40:   77:	return x;
        -:   78:}
