        -:    0:Source:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_scalb/build/foo_raw.c
        -:    0:Graph:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_scalb/build/foo_raw.gcno
        -:    0:Data:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_scalb/build/foo_raw.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* @(#)e_scalb.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/*
        -:   15: * __ieee754_scalb(x, fn) is provide for
        -:   16: * passing various standard test suite. One 
        -:   17: * should use scalbn() instead.
        -:   18: */
        -:   19:
        -:   20:#include "fdlibm.h"
        -:   21:
        -:   22:#ifdef __STDC__
function foo_raw called 17 returned 100% blocks executed 100%
       17:   23:	double foo_raw(double x, double fn)
        -:   24:#else
        -:   25:	double foo_raw(x,fn)
        -:   26:	double x, fn;
        -:   27:#endif
        -:   28:{
       17:   29:	if (isnan(x)||isnan(fn)) return x*fn;
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       15:   30:	if (!finite(fn)) {
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        2:   31:	    if(fn>0.0) return x*fn;
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   32:	    else       return x/(-fn);
        -:   33:	}
       13:   34:	if (rint(fn)!=fn) return (fn-fn)/(fn-fn);
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
       11:   35:	if ( fn > 65000.0) return scalbn(x, 65000);
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        9:   36:	if (-fn > 65000.0) return scalbn(x,-65000);
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        2:   37:	return scalbn(x,(int)fn);
        -:   38:}
