        -:    0:Source:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_hypot/build/foo_raw.c
        -:    0:Graph:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_hypot/build/foo_raw.gcno
        -:    0:Data:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_hypot/build/foo_raw.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* @(#)e_hypot.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* __ieee754_hypot(x,y)
        -:   15: *
        -:   16: * Method :                  
        -:   17: *	If (assume round-to-nearest) z=x*x+y*y 
        -:   18: *	has error less than sqrt(2)/2 ulp, than 
        -:   19: *	sqrt(z) has error less than 1 ulp (exercise).
        -:   20: *
        -:   21: *	So, compute sqrt(x*x+y*y) with some care as 
        -:   22: *	follows to get the error below 1 ulp:
        -:   23: *
        -:   24: *	Assume x>y>0;
        -:   25: *	(if possible, set rounding to round-to-nearest)
        -:   26: *	1. if x > 2y  use
        -:   27: *		x1*x1+(y*y+(x2*(x+x1))) for x*x+y*y
        -:   28: *	where x1 = x with lower 32 bits cleared, x2 = x-x1; else
        -:   29: *	2. if x <= 2y use
        -:   30: *		t1*y1+((x-y)*(x-y)+(t1*y2+t2*y))
        -:   31: *	where t1 = 2x with lower 32 bits cleared, t2 = 2x-t1, 
        -:   32: *	y1= y with lower 32 bits chopped, y2 = y-y1.
        -:   33: *		
        -:   34: *	NOTE: scaling may be necessary if some argument is too 
        -:   35: *	      large or too tiny
        -:   36: *
        -:   37: * Special cases:
        -:   38: *	hypot(x,y) is INF if x or y is +INF or -INF; else
        -:   39: *	hypot(x,y) is NAN if x or y is NAN.
        -:   40: *
        -:   41: * Accuracy:
        -:   42: * 	hypot(x,y) returns sqrt(x^2+y^2) with error less 
        -:   43: * 	than 1 ulps (units in the last place) 
        -:   44: */
        -:   45:
        -:   46:#include "fdlibm.h"
        -:   47:
        -:   48:#ifdef __STDC__
function foo_raw called 17 returned 100% blocks executed 93%
       17:   49:	double foo_raw(double x, double y)
        -:   50:#else
        -:   51:	double foo_raw(x,y)
        -:   52:	double x, y;
        -:   53:#endif
        -:   54:{
       17:   55:	double a=x,b=y,t1,t2,y1,y2,w;
        -:   56:	int j,k,ha,hb;
        -:   57:
       17:   58:	ha = __HI(x)&0x7fffffff;	/* high word of  x */
       17:   59:	hb = __HI(y)&0x7fffffff;	/* high word of  y */
       17:   60:	if(hb > ha) {a=y;b=x;j=ha; ha=hb;hb=j;} else {a=x;b=y;}
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
       17:   61:	__HI(a) = ha;	/* a <- |a| */
       17:   62:	__HI(b) = hb;	/* b <- |b| */
       17:   63:	if((ha-hb)>0x3c00000) {return a+b;} /* x/y > 2**60 */
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
       14:   64:	k=0;
       14:   65:	if(ha > 0x5f300000) {	/* a>2**500 */
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        2:   66:	   if(ha >= 0x7ff00000) {	/* Inf or NaN */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   67:	       w = a+b;			/* for sNaN */
        2:   68:	       if(((ha&0xfffff)|__LO(a))==0) w = a;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   69:	       if(((hb^0x7ff00000)|__LO(b))==0) w = b;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   70:	       return w;
        -:   71:	   }
        -:   72:	   /* scale a and b by 2**-600 */
    #####:   73:	   ha -= 0x25800000; hb -= 0x25800000;	k += 600;
    #####:   74:	   __HI(a) = ha;
    #####:   75:	   __HI(b) = hb;
        -:   76:	}
       12:   77:	if(hb < 0x20b00000) {	/* b < 2**-500 */
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        4:   78:	    if(hb <= 0x000fffff) {	/* subnormal b or 0 */	
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   79:		if((hb|(__LO(b)))==0) return a;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    #####:   80:		t1=0;
    #####:   81:		__HI(t1) = 0x7fd00000;	/* t1=2^1022 */
    #####:   82:		b *= t1;
    #####:   83:		a *= t1;
    #####:   84:		k -= 1022;
        -:   85:	    } else {		/* scale a and b by 2^600 */
        3:   86:	        ha += 0x25800000; 	/* a *= 2^600 */
        3:   87:		hb += 0x25800000;	/* b *= 2^600 */
        3:   88:		k -= 600;
        3:   89:	   	__HI(a) = ha;
        3:   90:	   	__HI(b) = hb;
        -:   91:	    }
        -:   92:	}
        -:   93:    /* medium size a and b */
       11:   94:	w = a-b;
       11:   95:	if (w>b) {
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        4:   96:	    t1 = 0;
        4:   97:	    __HI(t1) = ha;
        4:   98:	    t2 = a-t1;
        4:   99:	    w  = sqrt(t1*t1-(b*(-b)-t2*(a+t1)));
        -:  100:	} else {
        7:  101:	    a  = a+a;
        7:  102:	    y1 = 0;
        7:  103:	    __HI(y1) = hb;
        7:  104:	    y2 = b - y1;
        7:  105:	    t1 = 0;
        7:  106:	    __HI(t1) = ha+0x00100000;
        7:  107:	    t2 = a - t1;
        7:  108:	    w  = sqrt(t1*y1-(w*(-w)-(t1*y2+t2*b)));
        -:  109:	}
       11:  110:	if(k!=0) {
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        3:  111:	    t1 = 1.0;
        3:  112:	    __HI(t1) += (k<<20);
        3:  113:	    return t1*w;
        8:  114:	} else return w;
        -:  115:}
