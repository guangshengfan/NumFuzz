        -:    0:Source:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_sinh/build/foo_raw.c
        -:    0:Graph:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_sinh/build/foo_raw.gcno
        -:    0:Data:/home/savcuda/Desktop/FloatFuz/benchmark/Coverme/fdlibm/e_sinh/build/foo_raw.gcda
        -:    0:Runs:1
        -:    1:
        -:    2:/* @(#)e_sinh.c 1.3 95/01/18 */
        -:    3:/*
        -:    4: * ====================================================
        -:    5: * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
        -:    6: *
        -:    7: * Developed at SunSoft, a Sun Microsystems, Inc. business.
        -:    8: * Permission to use, copy, modify, and distribute this
        -:    9: * software is freely granted, provided that this notice 
        -:   10: * is preserved.
        -:   11: * ====================================================
        -:   12: */
        -:   13:
        -:   14:/* __ieee754_sinh(x)
        -:   15: * Method : 
        -:   16: * mathematically sinh(x) if defined to be (exp(x)-exp(-x))/2
        -:   17: *	1. Replace x by |x| (sinh(-x) = -sinh(x)). 
        -:   18: *	2. 
        -:   19: *		                                    E + E/(E+1)
        -:   20: *	    0        <= x <= 22     :  sinh(x) := --------------, E=expm1(x)
        -:   21: *			       			        2
        -:   22: *
        -:   23: *	    22       <= x <= lnovft :  sinh(x) := exp(x)/2 
        -:   24: *	    lnovft   <= x <= ln2ovft:  sinh(x) := exp(x/2)/2 * exp(x/2)
        -:   25: *	    ln2ovft  <  x	    :  sinh(x) := x*shuge (overflow)
        -:   26: *
        -:   27: * Special cases:
        -:   28: *	sinh(x) is |x| if x is +INF, -INF, or NaN.
        -:   29: *	only sinh(0)=0 is exact for finite x.
        -:   30: */
        -:   31:
        -:   32:#include "fdlibm.h"
        -:   33:
        -:   34:#ifdef __STDC__
        -:   35:static const double one = 1.0, shuge = 1.0e307;
        -:   36:#else
        -:   37:static double one = 1.0, shuge = 1.0e307;
        -:   38:#endif
        -:   39:
        -:   40:#ifdef __STDC__
function foo_raw called 19 returned 100% blocks executed 100%
       19:   41:	double foo_raw(double x)
        -:   42:#else
        -:   43:	double foo_raw(x)
        -:   44:	double x;
        -:   45:#endif
        -:   46:{	
        -:   47:	double t,w,h;
        -:   48:	int ix,jx;
        -:   49:	unsigned lx;
        -:   50:
        -:   51:    /* High word of |x|. */
       19:   52:	jx = __HI(x);
       19:   53:	ix = jx&0x7fffffff;
        -:   54:
        -:   55:    /* x is INF or NaN */
       19:   56:	if(ix>=0x7ff00000) return x+x;	
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:   57:
       18:   58:	h = 0.5;
       18:   59:	if (jx<0) h = -h;
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
        -:   60:    /* |x| in [0,22], return sign(x)*0.5*(E+E/(E+1))) */
       18:   61:	if (ix < 0x40360000) {		/* |x|<22 */
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        5:   62:	    if (ix<0x3e300000) 		/* |x|<2**-28 */
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        1:   63:		if(shuge+x>one) return x;/* sinh(tiny) = tiny with inexact */
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   64:	    t = expm1(fabs(x));
        4:   65:	    if(ix<0x3ff00000) return h*(2.0*t-t*t/(t+one));
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   66:	    return h*(t+t/(t+one));
        -:   67:	}
        -:   68:
        -:   69:    /* |x| in [22, log(maxdouble)] return 0.5*exp(|x|) */
       13:   70:	if (ix < 0x40862E42)  return h*__ieee754_exp(fabs(x));
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
call    2 returned 100%
        -:   71:
        -:   72:    /* |x| in [log(maxdouble), overflowthresold] */
        8:   73:	lx = *( (((*(unsigned*)&one)>>29)) + (unsigned*)&x);
        8:   74:	if (ix<0x408633CE || (ix==0x408633ce)&&(lx<=(unsigned)0x8fb9f87d)) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 25% (fallthrough)
branch  3 taken 75%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   75:	    w = __ieee754_exp(0.5*fabs(x));
call    0 returned 100%
        4:   76:	    t = h*w;
        4:   77:	    return t*w;
        -:   78:	}
        -:   79:
        -:   80:    /* |x| > overflowthresold, sinh(x) overflow */
        4:   81:	return x*shuge;
        -:   82:}
